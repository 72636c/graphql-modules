(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{104:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return l})),n.d(r,"metadata",(function(){return i})),n.d(r,"rightToc",(function(){return s})),n.d(r,"default",(function(){return p}));var t=n(3),o=n(8),a=(n(0),n(124)),l={id:"load-your-schema",title:"Load Your Schema and Resolvers",sidebar_label:"Load Your Schema and Resolvers"},i={unversionedId:"recipes/load-your-schema",id:"version-legacy/recipes/load-your-schema",isDocsHomePage:!1,title:"Load Your Schema and Resolvers",description:"There are multiple ways to load your schema, and GraphQL Modules tries to make it easy for you.",source:"@site/versioned_docs/version-legacy/recipes/load-your-schema.md",slug:"/recipes/load-your-schema",permalink:"/docs/legacy/recipes/load-your-schema",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/load-your-schema.md",version:"legacy",sidebar_label:"Load Your Schema and Resolvers",sidebar:"version-legacy/docs",previous:{title:"Development Environment",permalink:"/docs/legacy/recipes/development-environment"},next:{title:"Communication Between Modules",permalink:"/docs/legacy/recipes/communication-between-modules"}},s=[{value:"Using <code>sonar</code> in <code>graphql-toolkit</code>",id:"using-sonar-in-graphql-toolkit",children:[]},{value:"Using imports and <code>graphql-import-node</code>",id:"using-imports-and-graphql-import-node",children:[]},{value:"As a string",id:"as-a-string",children:[]}],c={rightToc:s};function p(e){var r=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},c,n,{components:r,mdxType:"MDXLayout"}),Object(a.b)("p",null,"There are multiple ways to load your schema, and GraphQL Modules tries to make it easy for you."),Object(a.b)("h2",{id:"using-sonar-in-graphql-toolkit"},"Using ",Object(a.b)("inlineCode",{parentName:"h2"},"sonar")," in ",Object(a.b)("inlineCode",{parentName:"h2"},"graphql-toolkit")),Object(a.b)("p",null,"You can use ",Object(a.b)("inlineCode",{parentName:"p"},"graphql-toolkit"),", it has a powerful mechanism for finding and loading your schema and resolvers files."),Object(a.b)("p",null,"Along with ",Object(a.b)("inlineCode",{parentName:"p"},"graphql-toolkit"),"'s ",Object(a.b)("inlineCode",{parentName:"p"},"sonar"),", you can separate your GraphQL schema definition and resolvers to smaller parts, and load them without directly specifying files."),Object(a.b)("p",null,"For example, given the following structure:"),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{}),"modules/\n    my-module/\n        index.ts\n        schema/\n            user.graphql\n            query.graphql\n            mutation.graphql\n        resolvers/\n            user.ts\n            query.ts\n            mutation.ts\n")),Object(a.b)("p",null,"You can easily load all of your ",Object(a.b)("inlineCode",{parentName:"p"},".graphql")," files and ",Object(a.b)("inlineCode",{parentName:"p"},".ts")," resolvers files like below:"),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-typescript"}),"import { GraphQLModule } from '@graphql-modules/core';\nimport { loadResolversFiles, loadSchemaFiles } from 'graphql-toolkit';\n\nexport const UserModule = new GraphQLModule({\n  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n});\n")),Object(a.b)("p",null,"This way, you don't have to specify each file and each resolver; the tools will do it for you."),Object(a.b)("h2",{id:"using-imports-and-graphql-import-node"},"Using imports and ",Object(a.b)("inlineCode",{parentName:"h2"},"graphql-import-node")),Object(a.b)("p",null,"You can also write your schema and resolvers in different files and then import them using ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("a",Object(t.a)({parentName:"strong"},{href:"https://github.com/ardatan/graphql-import-node"}),"graphql-import-node")),":"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"modules/my-module/index.ts")),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-typescript"}),"import { GraphQLModule } from '@graphql-modules/core';\nimport resolvers from './resolvers';\nimport * as typeDefs from './schema.graphql';\n\nexport const UserModule = new GraphQLModule({\n  resolvers,\n  typeDefs,\n});\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"modules/my-module/resolvers.ts")),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-typescript"}),"export default {\n  User: {\n    id: () => {},\n  },\n  Query: {\n    user: () => {},\n  },\n};\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"modules/my-module/schema.graphql")),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-graphql"}),"type User {\n  id: String\n}\n\ntype Query {\n  user(id: Int!): User\n}\n")),Object(a.b)("h2",{id:"as-a-string"},"As a string"),Object(a.b)("p",null,"The simplest way to load your schema and resolvers into a module is to write them directly on your ",Object(a.b)("inlineCode",{parentName:"p"},"GraphQLModule")," definition:"),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-typescript"}),"import { GraphQLModule } from '@graphql-modules/core';\nimport gql from 'graphql-tag';\n\nexport const UserModule = new GraphQLModule({\n  resolvers: {\n    User: {\n      id: () => {},\n    },\n    Query: {\n      user: () => {},\n    },\n  },\n  typeDefs: gql`\n    type User {\n      id: String\n    }\n\n    type Query {\n      user(id: Int!): User\n    }\n  `,\n});\n")))}p.isMDXComponent=!0},124:function(e,r,n){"use strict";n.d(r,"a",(function(){return u})),n.d(r,"b",(function(){return b}));var t=n(0),o=n.n(t);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var r=o.a.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=p(e.components);return o.a.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},m=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=t,b=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?o.a.createElement(b,i(i({ref:r},c),{},{components:n})):o.a.createElement(b,i({ref:r},c))}));function b(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);