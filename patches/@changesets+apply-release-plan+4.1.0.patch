diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
index 2ca3b04..90fcef8 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
@@ -116,7 +116,8 @@ function shouldUpdateDependencyBasedOnConfig(release, {
 const DEPENDENCY_TYPES = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
 function versionPackage(release, versionsToUpdate, {
   updateInternalDependencies,
-  onlyUpdatePeerDependentsWhenOutOfRange
+  onlyUpdatePeerDependentsWhenOutOfRange,
+  ignoreRange
 }) {
   let {
     newVersion,
@@ -156,7 +157,7 @@ function versionPackage(release, versionsToUpdate, {
         // they probably want it to stay like that
         new semver.Range(depCurrentVersion).range !== "") {
           let rangeType = getVersionRangeType__default['default'](depCurrentVersion);
-          let newNewRange = `${rangeType}${version}`;
+          let newNewRange = ignoreRange ? version : `${rangeType}${version}`;
           if (usesWorkspaceRange) newNewRange = `workspace:${newNewRange}`;
           deps[name] = newNewRange;
         }
@@ -255,7 +256,7 @@ async function getCommitThatAddsChangeset(changesetId, cwd) {
   }
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir;
   let touchedFiles = [];
   const packagesByName = new Map(packages.packages.map(x => [x.packageJson.name, x]));
@@ -293,6 +294,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
   let finalisedRelease = releaseWithChangelogs.map(release => {
     return versionPackage(release, versionsToUpdate, {
       updateInternalDependencies: config$1.updateInternalDependencies,
+      ignoreRange,
       onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange
     });
   });
diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
index d143cee..ea491fb 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
@@ -64,7 +64,7 @@ function shouldUpdateDependencyBasedOnConfig(release, {depVersionRange: depVersi
 
 const DEPENDENCY_TYPES = [ "dependencies", "devDependencies", "peerDependencies", "optionalDependencies" ];
 
-function versionPackage(release, versionsToUpdate, {updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange}) {
+function versionPackage(release, versionsToUpdate, {ignoreRange, updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange}) {
   let {newVersion: newVersion, packageJson: packageJson} = release;
   packageJson.version = newVersion;
   for (let depType of DEPENDENCY_TYPES) {
@@ -83,7 +83,7 @@ function versionPackage(release, versionsToUpdate, {updateInternalDependencies:
       })) continue;
       const usesWorkspaceRange = depCurrentVersion.startsWith("workspace:");
       if (usesWorkspaceRange && (depCurrentVersion = depCurrentVersion.substr(10)), "" !== new semver.Range(depCurrentVersion).range) {
-        let newNewRange = `${getVersionRangeType__default.default(depCurrentVersion)}${version}`;
+        let newNewRange = ignoreRange ? version : `${getVersionRangeType__default.default(depCurrentVersion)}${version}`;
         usesWorkspaceRange && (newNewRange = "workspace:" + newNewRange), deps[name] = newNewRange;
       }
     }
@@ -150,7 +150,7 @@ async function getCommitThatAddsChangeset(changesetId, cwd) {
   return commitForOldChangeset || void 0;
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir, touchedFiles = [];
   const packagesByName = new Map(packages.packages.map((x => [ x.packageJson.name, x ])));
   let {releases: releases, changesets: changesets} = releasePlan;
@@ -167,6 +167,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
     type: type
   }))), finalisedRelease = releaseWithChangelogs.map((release => versionPackage(release, versionsToUpdate, {
     updateInternalDependencies: config$1.updateInternalDependencies,
+    ignoreRange,
     onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange
   }))), prettierConfig = await prettier__default.default.resolveConfig(cwd);
   for (let release of finalisedRelease) {
