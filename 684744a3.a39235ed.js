(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{124:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var o=t(0),r=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),u=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=u(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=u(t),m=o,d=b["".concat(a,".").concat(m)]||b[m]||p[m]||i;return t?r.a.createElement(d,c(c({ref:n},l),{},{components:t})):r.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},92:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var o=t(3),r=t(8),i=(t(0),t(124)),a={id:"communication-between-modules",title:"Communication Between Modules",sidebar_label:"Communication Between Modules"},c={unversionedId:"recipes/communication-between-modules",id:"version-legacy/recipes/communication-between-modules",isDocsHomePage:!1,title:"Communication Between Modules",description:"While basically modules should be a standalone unit of code, it's not possible to create completely standalone modules.",source:"@site/versioned_docs/version-legacy/recipes/communication-between-modules.md",slug:"/recipes/communication-between-modules",permalink:"/docs/legacy/recipes/communication-between-modules",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/communication-between-modules.md",version:"legacy",sidebar_label:"Communication Between Modules",sidebar:"version-legacy/docs",previous:{title:"Load Your Schema and Resolvers",permalink:"/docs/legacy/recipes/load-your-schema"},next:{title:"Microservices",permalink:"/docs/legacy/recipes/microservices"}},s=[{value:"Using Direct Dependency Injection",id:"using-direct-dependency-injection",children:[]},{value:"Using Injection Tokens",id:"using-injection-tokens",children:[]},{value:"Using a Communication Bridge: PubSub",id:"using-a-communication-bridge-pubsub",children:[{value:"Existing Implementations for PubSub",id:"existing-implementations-for-pubsub",children:[]}]}],l={rightToc:s};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"While basically modules should be a standalone unit of code, it's not possible to create ",Object(i.b)("strong",{parentName:"p"},"completely")," standalone modules.\nModules need to interact with each other, execute functions, send messages and more.\nGraphQL Modules provides multiple ways of doing it, and you should pick the right one according to your needs."),Object(i.b)("h2",{id:"using-direct-dependency-injection"},"Using Direct Dependency Injection"),Object(i.b)("p",null,"If your modules are coupled, you can use direct dependency injection."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"import { Injectable } from '@graphql-modules/di';\nimport { OtherProvider } from '../my-other-module/other.provider';\n\n@Injectable()\nexport class MyProvider {\n  constructor(private otherProvider: OtherProvider) {}\n}\n")),Object(i.b)("h2",{id:"using-injection-tokens"},"Using Injection Tokens"),Object(i.b)("p",null,"If you wish to make a module communicate with other modules without direct imports, you can use injection tokens:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"import { Inject, Injectable } from '@graphql-modules/di';\n\nexport interface IOtherProviderSignature {\n  doSomething: () => void;\n}\n\n@Injectable()\nexport class MyProvider {\n  constructor(\n    @Inject(MY_CLASS_TOKEN) private otherProvider: IOtherProviderSignature\n  ) {}\n}\n")),Object(i.b)("p",null,"Then, your app or other modules can use the following to implement it:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"class MyImplementation implements IOtherProviderSignature {\n  doSomething() {\n    // ... some code ...\n  }\n}\n")),Object(i.b)("p",null,"And provide it using ",Object(i.b)("inlineCode",{parentName:"p"},"providers"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"{ provide: MY_CLASS_TOKEN, useClass: MyImplementation }\n")),Object(i.b)("h2",{id:"using-a-communication-bridge-pubsub"},"Using a Communication Bridge: PubSub"),Object(i.b)("p",null,"GraphQL Modules can work with ",Object(i.b)("inlineCode",{parentName:"p"},"PubSub")," mechanism for dealing with messages between modules."),Object(i.b)("p",null,"It's useful when you want to notify other modules of something, without knowing them directly."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"PubSub")," is implemented as a simple Pub/Sub mechanism for publishing/subscribing to messages."),Object(i.b)("p",null,"First, you need to tell ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQLModule")," how to transmit your messages. ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/apollographql/graphql-subscriptions"}),"graphql-subscriptions")," provides a simple ",Object(i.b)("inlineCode",{parentName:"p"},"PubSub")," implementation based on ",Object(i.b)("inlineCode",{parentName:"p"},"EventEmitter"),"."),Object(i.b)("p",null,"To use it, pass the ",Object(i.b)("inlineCode",{parentName:"p"},"PubSub")," class as a provider in a shared ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQLModule")," instance:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"import { GraphQLModule } from '@graphql-modules/core';\nimport { PubSub } from 'graphql-subscriptions';\n\nconst CommonModule = new GraphQLModule({\n    providers: [\n      PubSub\n      /* ... */\n    ]\n    imports: [ /* ... */],\n});\n")),Object(i.b)("p",null,"And import this common module when you want to use ",Object(i.b)("inlineCode",{parentName:"p"},"PubSub"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"import { GraphQLModule } from '@graphql-modules/core';\n\nexport const FooModule = new GraphQLModule({\n  imports: [CommonModule],\n});\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"import { GraphQLModule } from '@graphql-modules/core';\n\nexport const BarModule = new GraphQLModule({\n  imports: [CommonModule],\n  providers: [MyProvider],\n});\n")),Object(i.b)("p",null,"To use ",Object(i.b)("inlineCode",{parentName:"p"},"PubSub"),", you can do the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"import { Injectable } from '@graphql-modules/di';\nimport { PubSub } from 'graphql-subscriptions';\n\n@Injectable()\nexport class MyProvider {\n  constructor(private pubsub: PubSub) {\n    // Listen to messages and handle them\n    pubsub.subscribe('NOTIFY_USER', (payload) => {\n      // Do something\n    });\n  }\n\n  doSomething() {\n    // Publish messages\n    pubsub.publish('DO_SOMETHING_ELSE', {\n      foo: 'bar',\n    });\n  }\n}\n")),Object(i.b)("p",null,"This kind of communication between modules is useful for implementing notifications, auditing, logging, etc."),Object(i.b)("p",null,"It's also useful for implementing communication between GraphQL Modules servers. There are various PubSub implementations based on EventEmitter, Redis and RabbitMQ."),Object(i.b)("h3",{id:"existing-implementations-for-pubsub"},"Existing Implementations for PubSub"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"PubSub")," can be replaced by another implementations. The following are existing ready-to-use implementations:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("a",Object(o.a)({parentName:"strong"},{href:"https://github.com/davidyaha/graphql-redis-subscriptions"}),"Redis"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("a",Object(o.a)({parentName:"strong"},{href:"https://github.com/axelspringer/graphql-google-pubsub"}),"Google PubSub"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("a",Object(o.a)({parentName:"strong"},{href:"https://github.com/davidyaha/graphql-mqtt-subscriptions"}),"MQTT enabled broker"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("a",Object(o.a)({parentName:"strong"},{href:"https://github.com/cdmbase/graphql-rabbitmq-subscriptions"}),"RabbitMQ"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("a",Object(o.a)({parentName:"strong"},{href:"https://github.com/ancashoria/graphql-kafka-subscriptions"}),"Kafka"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("a",Object(o.a)({parentName:"strong"},{href:"https://github.com/GraphQLCollege/graphql-postgres-subscriptions"}),"Postgres")))))}u.isMDXComponent=!0}}]);