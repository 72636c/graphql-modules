(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{124:function(e,r,a){"use strict";a.d(r,"a",(function(){return d})),a.d(r,"b",(function(){return h}));var n=a(0),t=a.n(n);function o(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function s(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?s(Object(a),!0).forEach((function(r){o(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function i(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=t.a.createContext({}),p=function(e){var r=t.a.useContext(l),a=r;return e&&(a="function"==typeof e?e(r):c(c({},r),e)),a},d=function(e){var r=p(e.components);return t.a.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.a.createElement(t.a.Fragment,{},r)}},m=t.a.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=n,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?t.a.createElement(h,c(c({ref:r},l),{},{components:a})):t.a.createElement(h,c({ref:r},l))}));function h(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=m;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var l=2;l<o;l++)s[l]=a[l];return t.a.createElement.apply(null,s)}return t.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},80:function(e,r,a){"use strict";a.r(r),a.d(r,"frontMatter",(function(){return s})),a.d(r,"metadata",(function(){return c})),a.d(r,"rightToc",(function(){return i})),a.d(r,"default",(function(){return p}));var n=a(3),t=a(8),o=(a(0),a(124)),s={id:"data-sources",title:"Fetch External Data Using Data Sources",sidebar_label:"Fetch External Data Using Data Sources"},c={unversionedId:"recipes/data-sources",id:"version-legacy/recipes/data-sources",isDocsHomePage:!1,title:"Fetch External Data Using Data Sources",description:"As defined in the Apollo Server documentation, data sources are specific classes that encapsulate fetching data from particular services, with built-in support for caching, deduplication and error handling.",source:"@site/versioned_docs/version-legacy/recipes/data-sources.md",slug:"/recipes/data-sources",permalink:"/docs/legacy/recipes/data-sources",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/data-sources.md",version:"legacy",sidebar_label:"Fetch External Data Using Data Sources",sidebar:"version-legacy/docs",previous:{title:"Microservices",permalink:"/docs/legacy/recipes/microservices"},next:{title:"Solve N+1 Using DataLoader",permalink:"/docs/legacy/recipes/data-loader"}},i=[{value:"REST Data Source Example",id:"rest-data-source-example",children:[]},{value:"Accessing data sources from resolvers",id:"accessing-data-sources-from-resolvers",children:[]},{value:"Using Memcached/Redis as a cache storage backend",id:"using-memcachedredis-as-a-cache-storage-backend",children:[]}],l={rightToc:i};function p(e){var r=e.components,a=Object(t.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,a,{components:r,mdxType:"MDXLayout"}),Object(o.b)("p",null,"As defined in the Apollo Server documentation, data sources are specific classes that encapsulate fetching data from particular services, with built-in support for caching, deduplication and error handling.\nA data source instance uses the cache of your GraphQL Server and is usually passed through your application context."),Object(o.b)("p",null,"GraphQL Modules has built-in support for data sources in its own encapsulation-based modular dependency-injection system.\nGraphQL Modules considers data sources as providers and passes the cache logic of the module."),Object(o.b)("p",null,"Let's assume you have a data source class for the communication between your external REST API.\nAll you need to do is add the ",Object(o.b)("inlineCode",{parentName:"p"},"Injectable")," decorator for this class to let the class be part of GraphQL Modules dependency injection."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("inlineCode",{parentName:"p"},"ProviderScope.Session")," is the recommended scope for data sources, it will ensure API responses are not cached between sessions. See ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"../introduction/dependency-injection#provider-scopes"},"Provider Scopes")),".")),Object(o.b)("p",null,"See also ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://www.apollographql.com/docs/apollo-server/data/data-sources/"},"Data sources - Apollo Server")),"."),Object(o.b)("h2",{id:"rest-data-source-example"},"REST Data Source Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { RESTDataSource } from 'apollo-datasource-rest';\nimport { Injectable } from '@graphql-modules/di';\n\n@Injectable({\n  scope: ProviderScope.Session,\n})\nexport class MoviesAPI extends RESTDataSource {\n  baseURL = 'https://movies-api.example.com/';\n\n  async getMovie(id) {\n    return this.get(`movies/${id}`);\n  }\n\n  // an example of making an HTTP POST request\n  async postMovie(movie) {\n    return this.post(\n      `movies`, // path\n      movie // request body\n    );\n  }\n\n  // an example of making an HTTP PUT request\n  async newMovie(movie) {\n    return this.put(\n      `movies`, // path\n      movie // request body\n    );\n  }\n\n  // an example of making an HTTP PATCH request\n  async updateMovie(movie) {\n    return this.patch(\n      `movies`, // path\n      { id: movie.id, movie } // request body\n    );\n  }\n\n  // an example of making an HTTP DELETE request\n  async deleteMovie(movie) {\n    return this.delete(\n      `movies/${movie.id}` // path\n    );\n  }\n}\n")),Object(o.b)("h2",{id:"accessing-data-sources-from-resolvers"},"Accessing data sources from resolvers"),Object(o.b)("p",null,"Then add this data source provider to our module, and you can use that data source in your resolvers just like other kinds of providers."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { MoviesAPI } from './movies-api.provider';\nimport { GraphQLModule } from '@graphql-modules/core';\n\nexport const MoviesModule = new GraphQLModules({\n  providers: [MoviesAPI],\n  typeDefs: gql`\n    type Movie {\n      id: ID\n      name: String\n      # Other fields\n    }\n    type Query {\n      getMovie(id: ID): Movie\n    }\n  `,\n  resolvers: {\n    Query: {\n      getMovie: (root, args, context, info) =>\n        context.injector.get(MoviesAPI).getMovie(args.id),\n    },\n  },\n});\n")),Object(o.b)("h2",{id:"using-memcachedredis-as-a-cache-storage-backend"},"Using Memcached/Redis as a cache storage backend"),Object(o.b)("p",null,"As described in Apollo Server docs, GraphQL Modules also uses in-memory caching mechanism by default.\nBut you can also use other cache mechanisms in your GraphQL Modules application."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { MemcachedCache } from 'apollo-server-cache-memcached';\n\nexport const MoviesModule = new GraphQLModules({\n  providers: [MoviesAPI],\n  typeDefs,\n  resolvers,\n  cache: new MemcachedCache(\n    ['memcached-server-1', 'memcached-server-2', 'memcached-server-3'],\n    { retries: 10, retry: 10000 } // Options\n  ),\n});\n")),Object(o.b)("p",null,"You can share GraphQL Modules cache mechanism with your GraphQL Server."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const { schema, selfCache } = YourGraphQLModule;\n\nnew ApolloServer({\n  schema,\n  cache: selfCache,\n});\n")),Object(o.b)("p",null,"See also ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://www.apollographql.com/docs/apollo-server/data/data-sources/#using-memcachedredis-as-a-cache-storage-backend"},"Using Memcached/Redis as a cache storage backend"))))}p.isMDXComponent=!0}}]);