(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{119:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return c}));var r=t(3),i=t(8),o=(t(0),t(128)),a={id:"type-definitions",title:"Type Definitions",sidebar_label:"Type Definitions (SDL)"},l={unversionedId:"essentials/type-definitions",id:"essentials/type-definitions",isDocsHomePage:!1,title:"Type Definitions",description:"GraphQL Schema is built out of types, enums, interfaces and so on. Defining or extending them in GraphQL Modules is fairly simple.",source:"@site/docs/essentials/type-definitions.md",slug:"/essentials/type-definitions",permalink:"/docs/essentials/type-definitions",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/essentials/type-definitions.md",version:"current",sidebar_label:"Type Definitions (SDL)",sidebar:"docs",previous:{title:"Get Started",permalink:"/docs/get-started"},next:{title:"Resolvers",permalink:"/docs/essentials/resolvers"}},p=[{value:"Storing SDL in <code>.graphql</code> files",id:"storing-sdl-in-graphql-files",children:[]},{value:"Dynamically Load SDL files",id:"dynamically-load-sdl-files",children:[]}],s={rightToc:p};function c(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"GraphQL Schema is built out of ",Object(o.b)("inlineCode",{parentName:"p"},"type"),"s, ",Object(o.b)("inlineCode",{parentName:"p"},"enum"),"s, ",Object(o.b)("inlineCode",{parentName:"p"},"interface"),"s and so on. Defining or extending them in GraphQL Modules is fairly simple."),Object(o.b)("p",null,"Just like GraphQL Schema, GraphQL Modules follow the same rules of writing SDL (Schema Definition Language), a single definition per type and multiple extensions. This way we force a good pattern and clarify ownership of each type."),Object(o.b)("p",null,"To get started with type definitions in your module, make sure to use ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," (you can import it from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-modules"),") or ",Object(o.b)("inlineCode",{parentName:"p"},"parse")," (from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql"),") to convert your string SDL definition into a ",Object(o.b)("inlineCode",{parentName:"p"},"DocumentNode")," object."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { createModule, gql } from 'graphql-modules';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: gql`\n    type Query {\n      user(id: ID!): User\n    }\n\n    type User {\n      id: ID!\n      username: String!\n    }\n  `,\n});\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Using ",Object(o.b)("inlineCode",{parentName:"p"},"string"),"s could be possible but we decided to force a better pattern. Using ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," tag means your IDE can highlight the GraphQL SDL and in general works better with other tools from the GraphQL ecosystem.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"TIP: ",Object(o.b)("inlineCode",{parentName:"p"},"typeDefs")," can be single item, or an array of multiple.")),Object(o.b)("h2",{id:"storing-sdl-in-graphql-files"},"Storing SDL in ",Object(o.b)("inlineCode",{parentName:"h2"},".graphql")," files"),Object(o.b)("p",null,"If you wish to write your GraphQL SDL in a ",Object(o.b)("inlineCode",{parentName:"p"},".graphql")," file, you need to make sure you are able to load it correctly in a NodeJS environment."),Object(o.b)("p",null,"To do so, use ",Object(o.b)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-import-node"},Object(o.b)("inlineCode",{parentName:"a"},"graphql-import-node"))," to make this process easier:"),Object(o.b)("p",null,"Start by installing it, and follow the installation instructions, based on your environment and your setup."),Object(o.b)("p",null,"Now, store your SDL in a ",Object(o.b)("inlineCode",{parentName:"p"},".graphql")," file(s), and load it this way, with ",Object(o.b)("inlineCode",{parentName:"p"},"import")," or ",Object(o.b)("inlineCode",{parentName:"p"},"require"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import MyQueryType from './query.type.graphql';\nimport { createModule } from 'graphql-modules';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: [MyQueryType],\n});\n")),Object(o.b)("h2",{id:"dynamically-load-sdl-files"},"Dynamically Load SDL files"),Object(o.b)("p",null,"If you have too many SDL files and you wish to load it dynamically, you can use loaders from ",Object(o.b)("inlineCode",{parentName:"p"},"@graphql-tools/load-files"),"!"),Object(o.b)("p",null,"Start by installing this package:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"yarn add @graphql-tools/load-files\n")),Object(o.b)("p",null,"Next, use it to load your files dynamically:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import MyQueryType from './query.type.graphql';\nimport { createModule } from 'graphql-modules';\nimport { loadFilesSync } from '@graphql-tools/load-files';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: loadFilesSync(join(__dirname, './typeDefs/*.graphql')),\n});\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note: the default implementation of ",Object(o.b)("inlineCode",{parentName:"p"},"loadFilesSync")," is using ",Object(o.b)("inlineCode",{parentName:"p"},"fs")," module. If you are using ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-import-node"),", you can add a 2nd parameter with configuration: ",Object(o.b)("inlineCode",{parentName:"p"},"{ useRequire: true }"),".")))}c.isMDXComponent=!0},128:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var r=t(0),i=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),c=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(t),b=r,m=d["".concat(a,".").concat(b)]||d[b]||u[b]||o;return t?i.a.createElement(m,l(l({ref:n},s),{},{components:t})):i.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=b;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);