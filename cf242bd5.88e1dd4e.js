(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{116:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return c}));var r=n(3),i=n(8),o=(n(0),n(124)),a={id:"type-definitions",title:"Type Definitions",sidebar_label:"Type Definitions (SDL)"},l={unversionedId:"essentials/type-definitions",id:"essentials/type-definitions",isDocsHomePage:!1,title:"Type Definitions",description:"GraphQL Schema is built out of types, enums, interfaces and so on. Defining or extending them in GraphQL Modules is fairly simple.",source:"@site/docs/essentials/type-definitions.md",slug:"/essentials/type-definitions",permalink:"/docs/essentials/type-definitions",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/essentials/type-definitions.md",version:"current",sidebar_label:"Type Definitions (SDL)",sidebar:"docs",previous:{title:"Get Started",permalink:"/docs/get-started"},next:{title:"Resolvers",permalink:"/docs/essentials/resolvers"}},p=[{value:"Storing SDL in <code>.graphql</code> files",id:"storing-sdl-in-graphql-files",children:[]},{value:"Dynamically Load SDL files",id:"dynamically-load-sdl-files",children:[]}],s={rightToc:p};function c(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"GraphQL Schema is built out of ",Object(o.b)("inlineCode",{parentName:"p"},"type"),"s, ",Object(o.b)("inlineCode",{parentName:"p"},"enum"),"s, ",Object(o.b)("inlineCode",{parentName:"p"},"interface"),"s and so on. Defining or extending them in GraphQL Modules is fairly simple."),Object(o.b)("p",null,"Just like GraphQL Schema, GraphQL Modules follow the same rules of writing SDL (Schema Definition Language), a single definition per type and multiple extensions. This way we force a good pattern and clarify ownership of each type."),Object(o.b)("p",null,"To get started with type definitions in your module, make sure to use ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," (you can import it from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-modules"),") or ",Object(o.b)("inlineCode",{parentName:"p"},"parse")," (from ",Object(o.b)("inlineCode",{parentName:"p"},"graphql"),") to convert your string SDL definition into a ",Object(o.b)("inlineCode",{parentName:"p"},"DocumentNode")," object."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { createModule, gql } from 'graphql-modules';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: gql`\n    type Query {\n      user(id: ID!): User\n    }\n\n    type User {\n      id: ID!\n      username: String!\n    }\n  `,\n});\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Using ",Object(o.b)("inlineCode",{parentName:"p"},"string"),"s could be possible but we decided to force a better pattern. Using ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," tag means your IDE can highlight the GraphQL SDL and in general works better with other tools from the GraphQL ecosystem.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"TIP: ",Object(o.b)("inlineCode",{parentName:"p"},"typeDefs")," can be single item, or an array of multiple.")),Object(o.b)("h2",{id:"storing-sdl-in-graphql-files"},"Storing SDL in ",Object(o.b)("inlineCode",{parentName:"h2"},".graphql")," files"),Object(o.b)("p",null,"If you wish to write your GraphQL SDL in a ",Object(o.b)("inlineCode",{parentName:"p"},".graphql")," file, you need to make sure you are able to load it correctly in a NodeJS environment."),Object(o.b)("p",null,"To do so, use ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/ardatan/graphql-import-node"}),Object(o.b)("inlineCode",{parentName:"a"},"graphql-import-node"))," to make this process easier:"),Object(o.b)("p",null,"Start by installing it, and follow the installation instructions, based on your environment and your setup."),Object(o.b)("p",null,"Now, store your SDL in a ",Object(o.b)("inlineCode",{parentName:"p"},".graphql")," file(s), and load it this way, with ",Object(o.b)("inlineCode",{parentName:"p"},"import")," or ",Object(o.b)("inlineCode",{parentName:"p"},"require"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import MyQueryType from './query.type.graphql';\nimport { createModule } from 'graphql-modules';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: [MyQueryType],\n});\n")),Object(o.b)("h2",{id:"dynamically-load-sdl-files"},"Dynamically Load SDL files"),Object(o.b)("p",null,"If you have too many SDL files and you wish to load it dynamically, you can use loaders from ",Object(o.b)("inlineCode",{parentName:"p"},"@graphql-tools/load-files"),"!"),Object(o.b)("p",null,"Start by installing this package:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"yarn add @graphql-tools/load-files\n")),Object(o.b)("p",null,"Next, use it to load your files dynamically:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import MyQueryType from './query.type.graphql';\nimport { createModule } from 'graphql-modules';\nimport { loadFilesSync } from '@graphql-tools/load-files';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: loadFilesSync(join(__dirname, './typeDefs/*.graphql')),\n});\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note: the default implementation of ",Object(o.b)("inlineCode",{parentName:"p"},"loadFilesSync")," is using ",Object(o.b)("inlineCode",{parentName:"p"},"fs")," module. If you are using ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-import-node"),", you can add a 2nd parameter with configuration: ",Object(o.b)("inlineCode",{parentName:"p"},"{ useRequire: true }"),".")))}c.isMDXComponent=!0},124:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),i=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),c=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(n),b=r,m=d["".concat(a,".").concat(b)]||d[b]||u[b]||o;return n?i.a.createElement(m,l(l({ref:t},s),{},{components:n})):i.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=b;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);