(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{132:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return a})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(3),o=t(9),s=(t(0),t(166)),i={id:"subscriptions",title:"Subscriptions",sidebar_label:"Subscriptions"},a={unversionedId:"introduction/subscriptions",id:"version-legacy/introduction/subscriptions",isDocsHomePage:!1,title:"Subscriptions",description:"Subscriptions are GraphQL operations that watch events emitted from your backend. GraphQL Modules supports GraphQL subscriptions with a little modification in your server code. You can read more about SubscriptionServer.",source:"@site/versioned_docs/version-legacy/introduction/subscriptions.md",slug:"/introduction/subscriptions",permalink:"/docs/legacy/introduction/subscriptions",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/introduction/subscriptions.md",version:"legacy",sidebar_label:"Subscriptions",sidebar:"version-legacy/docs",previous:{title:"Resolvers Composition",permalink:"/docs/legacy/introduction/resolvers-composition"},next:{title:"Test Your Module",permalink:"/docs/legacy/introduction/test-your-module"}},c=[{value:"Authentication Over WebSocket using OnConnect hook and Scoped Providers",id:"authentication-over-websocket-using-onconnect-hook-and-scoped-providers",children:[{value:"Using in Resolvers",id:"using-in-resolvers",children:[]}]}],p={toc:c};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Subscriptions are GraphQL operations that watch events emitted from your backend. GraphQL Modules supports GraphQL subscriptions with a little modification in your server code. You can ",Object(s.b)("strong",{parentName:"p"},Object(s.b)("a",{parentName:"strong",href:"https://github.com/apollographql/subscriptions-transport-ws"},"read more"))," about ",Object(s.b)("strong",{parentName:"p"},"SubscriptionServer"),"."),Object(s.b)("p",null,"Subscriptions need to have defined ",Object(s.b)("inlineCode",{parentName:"p"},"PubSub")," implementation in your GraphQL Modules application."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { PubSub } from 'graphql-subscriptions';\nexport const CommonModule = new GraphQLModule({\n  providers: [PubSub],\n});\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"export const PostModule = new GraphQLModule({\n  imports: [CommonModule],\n  providers: [PostsProvider],\n  typeDefs: gql`\n    type Subscription {\n      postAdded: Post\n    }\n\n    type Query {\n      posts: [Post]\n    }\n\n    type Mutation {\n      addPost(author: String, comment: String): Post\n    }\n\n    type Post {\n      author: String\n      comment: String\n    }\n  `,\n  resolvers: {\n    Subscription: {\n      postAdded: {\n        // Additional event labels can be passed to asyncIterator creation\n        subscribe: (root, args, { injector }) =>\n          injector.get(PubSub).asyncIterator([POST_ADDED]),\n      },\n    },\n    Query: {\n      posts: (root, args, { injector }) => injector.get(PostsProvider).posts(),\n    },\n    Mutation: {\n      addPost: (root, args, { injector }) => {\n        pubsub.publish(POST_ADDED, { postAdded: args });\n        return injector.get(PostsProvider).addPost(args);\n      },\n    },\n  },\n});\n")),Object(s.b)("p",null,"You have to export ",Object(s.b)("inlineCode",{parentName:"p"},"subscriptions")," from your ",Object(s.b)("inlineCode",{parentName:"p"},"AppModule"),", and pass it to your GraphQL Server."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { createServer } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport { execute, subscribe } from 'graphql';\nimport { GraphQLModule } from '@graphql-modules/core';\nimport { CommonModule } from './modules/common/common.module';\nimport { PostsModule } from './modules/posts/posts.module';\n\nconst { schema, subscriptions } = new GraphQLModule({\n  imports: [CommonModule, PostsModule],\n});\n\nconst WS_PORT = 5000;\n\n// Create WebSocket listener server\nconst websocketServer = createServer((request, response) => {\n  response.writeHead(404);\n  response.end();\n});\n\n// Bind it to port and start listening\nwebsocketServer.listen(WS_PORT, () =>\n  console.log(`Websocket Server is now running on http://localhost:${WS_PORT}`)\n);\n\nconst subscriptionServer = SubscriptionServer.create(\n  {\n    schema,\n    execute,\n    subscribe,\n    ...subscriptions,\n  },\n  {\n    server: websocketServer,\n    path: '/graphql',\n  }\n);\n\nserver.listen().then(({ url, subscriptionsUrl }) => {\n  console.log(`\ud83d\ude80 Server ready at ${url}`);\n  console.log(`\ud83d\ude80 Subscriptions ready at ${subscriptionsUrl}`);\n});\n")),Object(s.b)("h2",{id:"authentication-over-websocket-using-onconnect-hook-and-scoped-providers"},"Authentication Over WebSocket using OnConnect hook and Scoped Providers"),Object(s.b)("p",null,"Session life-time when using WebSocket is the same as the connection's. So, you can keep all the user state in your memory."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable, ProviderScope } from '@graphql-modules/di';\nimport { OnConnect } from '@graphql-modules/core';\n\n// This provider has created for each WS/HTTP connection, and kept until the connection is terminated\n@Injectable({\n  scope: ProviderScope.Session,\n})\nexport class AuthProvider implements OnConnect {\n  private authToken: string;\n  private user: User;\n  constructor(private usersProvider: UsersProvider) {}\n  // This will be called once immediately after connection established and the session is constructed.\n  async onConnect(connectionParams) {\n    if (connectionParams.authToken) {\n      this.authToken = connectionParams.authToken;\n      try {\n        await this.validateToken();\n        this.user = this.usersProvider.findUserByToken(this.authToken);\n      } catch (e) {\n        throw new Error('Invalid token');\n      }\n    } else {\n      throw new Error('Missing auth token!');\n    }\n  }\n  private async validateToken() {\n    // logic\n  }\n}\n")),Object(s.b)("h3",{id:"using-in-resolvers"},"Using in Resolvers"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"    resolvers: {\n        Subscription: {\n          postAdded: {\n            // Additional event labels can be passed to asyncIterator creation\n            subscribe: withFilter(\n                (root, args, { injector }) => injector.get(PubSub).asyncIterator([POST_ADDED]),\n                (root, args, { injector }) => payload.userId === injector.get(AuthProvider).user.id\n            )\n          },\n        },\n    }\n")))}u.isMDXComponent=!0},166:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),u=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(t),b=r,m=l["".concat(i,".").concat(b)]||l[b]||d[b]||s;return t?o.a.createElement(m,a(a({ref:n},p),{},{components:t})):o.a.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=b;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var p=2;p<s;p++)i[p]=t[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);