(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2481],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return h}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),h=o,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||i;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},31:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a={id:"introduction",title:"Dependency Injection",sidebar_label:"Introduction"},l={unversionedId:"di/introduction",id:"di/introduction",isDocsHomePage:!1,title:"Dependency Injection",description:"One of the main goals of GraphQL Modules is to help you organize and better understand the GraphQL codebase. We believe that Dependency Injection fits here perfectly.",source:"@site/docs/di/introduction.md",sourceDirName:"di",slug:"/di/introduction",permalink:"/docs/di/introduction",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/di/introduction.md",version:"current",sidebar_label:"Introduction",frontMatter:{id:"introduction",title:"Dependency Injection",sidebar_label:"Introduction"},sidebar:"docs",previous:{title:"Testing",permalink:"/docs/essentials/testing"},next:{title:"Providers and Tokens",permalink:"/docs/di/providers"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Hierarchical Injectors",id:"hierarchical-injectors",children:[]},{value:"Providers and Tokens",id:"providers-and-tokens",children:[]},{value:"Scopes",id:"scopes",children:[]}],s={toc:c};function p(e){var n=e.components,a=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"One of the main goals of GraphQL Modules is to help you organize and better understand the GraphQL codebase. We believe that Dependency Injection fits here perfectly."),(0,i.kt)("p",null,"We learned not to force Dependency Injection too early in the process, because dependency injection makes sense only in some use cases when you application grows, and using it can be recommended only when your codebase is quite large and you need to move fast."),(0,i.kt)("p",null,"GraphQL Modules lets you choose whether to use dependency injection or not."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Usage Requirements")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"GraphQL Modules depend on ",(0,i.kt)("strong",{parentName:"p"},"Reflect API")," for reflection and for defining dependencies between DI parts, please install and import ",(0,i.kt)("inlineCode",{parentName:"p"},"reflect-metadata")," before every other module."),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import 'reflect-metadata';\n/* code */\n")))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"We won't explain what Dependency Injection is, only how to use it withing the context of GraphQL-Modules. ",(0,i.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f/"},"You can find a quick tutorial about DI here"),"."),(0,i.kt)("p",null,"There are few terms to understand:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Injector"),(0,i.kt)("li",{parentName:"ul"},"Provider"),(0,i.kt)("li",{parentName:"ul"},"Token"),(0,i.kt)("li",{parentName:"ul"},"Scopes")),(0,i.kt)("p",null,"Each term will have its explanation in following examples."),(0,i.kt)("h2",{id:"hierarchical-injectors"},"Hierarchical Injectors"),(0,i.kt)("p",null,"As you know the structure of GraphQL Modules is flat and so is the hierarchy of Dependency Injection."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Every Module has its own isolated ",(0,i.kt)("u",null,"space")," and reuses a global ",(0,i.kt)("u",null,"space")," defined by Application.")),(0,i.kt)("p",null,"What does it mean?"),(0,i.kt)("p",null,"Whatever is defined in a Module, is only accessible within that module. It doesn't leak to other modules or application. On the other hand, Module consumes things defined in Application."),(0,i.kt)("p",null,'Now replace "',(0,i.kt)("u",null,"space"),'" with Dependency Injection and Injector.'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dependency Injection in GraphQL Modules",src:t(7859).Z})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Injector")," is responsible for registering and managing Services and Injection Tokens (and their values). Basically managing their own space. Every Module has its own Injector that has one parent which is Injector of the application."),(0,i.kt)("p",null,"If something (",(0,i.kt)("inlineCode",{parentName:"p"},"Provider"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectionToken"),") is not available in Module Injector, it will look up the Application Injector."),(0,i.kt)("h2",{id:"providers-and-tokens"},"Providers and Tokens"),(0,i.kt)("p",null,"The building blocks of DI are ",(0,i.kt)("a",{parentName:"p",href:"./providers"},"Providers and InjectionToken"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectionToken")," is an abstract way of declaring things you would like to live in your Injector space."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Provider")," is a way to ",(0,i.kt)("u",null,"provide")," a specific ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectionToken"),"."),(0,i.kt)("p",null,"They are covered in ",(0,i.kt)("a",{parentName:"p",href:"./providers"},"next chapter"),"."),(0,i.kt)("h2",{id:"scopes"},"Scopes"),(0,i.kt)("p",null,"Every ",(0,i.kt)("inlineCode",{parentName:"p"},"Provider")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectionToken")," is created once and the same instance is available for all incoming GraphQL Operations. That's the default behavior and it's under ",(0,i.kt)("inlineCode",{parentName:"p"},"Singleton")," Scope."),(0,i.kt)("p",null,"In GraphQL Modules, we have two kinds of scope, ",(0,i.kt)("inlineCode",{parentName:"p"},"Singleton")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Operation"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Operation")," scope means that a service is created for each incoming GraphQL Operation and destroyed once request is resolved. Read more about ",(0,i.kt)("a",{parentName:"p",href:"/docs/di/scopes"},"Scopes")," in a separate chapter."))}p.isMDXComponent=!0},7859:function(e,n,t){"use strict";n.Z=t.p+"assets/images/di-54097d5ff00898f7b8499e2747f7d4c5.png"}}]);