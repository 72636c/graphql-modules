(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{139:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var o=t(3),r=t(9),a=(t(0),t(166)),c={id:"lifecycles",title:"Lifecycles"},i={unversionedId:"advanced/lifecycles",id:"advanced/lifecycles",isDocsHomePage:!1,title:"Lifecycles",description:"Lifecycle hooks",source:"@site/docs/advanced/lifecycles.md",slug:"/advanced/lifecycles",permalink:"/docs/advanced/lifecycles",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/advanced/lifecycles.md",version:"current",sidebar:"docs",previous:{title:"Execution Context",permalink:"/docs/advanced/execution-context"},next:{title:"Solve N+1 Using DataLoader",permalink:"/docs/recipes/dataloader"}},l=[{value:"Lifecycle hooks",id:"lifecycle-hooks",children:[]},{value:"Manual control of operation cycle",id:"manual-control-of-operation-cycle",children:[{value:"autoDestroy",id:"autodestroy",children:[]}]}],s={toc:l};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"lifecycle-hooks"},"Lifecycle hooks"),Object(a.b)("p",null,"There are two life cycle hooks in GraphQL Modules, one represents an incoming request and the other is called when the execution is done. Hooks are only available in Operation scoped Injector."),Object(a.b)("p",null,"Every Operation scoped service is created for each incoing GraphQL operation, which means you can use the constructor as the initial hook."),Object(a.b)("p",null,"After Operation is resolved and the context about to be destroyed, GraphQL Modules call the ",Object(a.b)("inlineCode",{parentName:"p"},"onDestroy")," method on all operation-scoped services."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable, Scope, OnDestroy } from 'graphql-modules';\n\n@Injectable({\n  scope: Scope.Operation,\n})\nexport class Data implements OnDestroy {\n  constructor() {\n    // incoming operation, here you can do your setup and preparation\n  }\n\n  onDestroy() {\n    // Operation is resolved\n    // Execution context is about to be disposed\n  }\n}\n")),Object(a.b)("h2",{id:"manual-control-of-operation-cycle"},"Manual control of operation cycle"),Object(a.b)("p",null,"As you know, GraphQL operation represents an incoming request with GraphQL query and variables meaning it ends when GraphQL API resolves data and sends back the response. An operation is created when GraphQL execution starts (",Object(a.b)("inlineCode",{parentName:"p"},"execute")," function call). With operation comes Operation-scoped Dependency Injection."),Object(a.b)("p",null,"In some cases you wish to:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"access operation-scoped services before the execution phase happens"),Object(a.b)("li",{parentName:"ul"},"destroy a session and operation-scoped injectors some time after execution phase")),Object(a.b)("p",null,"This is why ",Object(a.b)("inlineCode",{parentName:"p"},"OperationController")," exists - it allows to fully control the life of the operation-scoped injectors."),Object(a.b)("p",null,"Here's an example:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"@Injectable({ scope: Scope.Operation })\nclass Status {\n  enabled = true;\n  enable() {\n    this.enabled = true;\n  }\n  disable() {\n    this.enabled = false;\n  }\n}\n\nconst mod = createModule({\n  id: 'status',\n  providers: [Status]\n})\n\nconst app = createApplication({\n  modules: [mod],\n  providers: [Data],\n});\n\nserver.use('/graphq', (req, res) => {\n  const controller = app.createOperationController({\n    /*\n      It's important to pass a correct context value here.\n      This value represents a context object available in Dependency Injection.\n      Keep on mind, it doesn't have to be the same context object as your resolvers get.\n    */\n    context: {},\n  });\n\n  const status = controller.injector.get(Status);\n\n  if (process.env.NODE_ENV === 'production') {\n    status.disable();\n  }\n\n  // < graphql execution here >\n\n  controller.destroy();\n});\n")),Object(a.b)("h3",{id:"autodestroy"},"autoDestroy"),Object(a.b)("p",null,"Using ",Object(a.b)("inlineCode",{parentName:"p"},"OperationController")," means you're in charge of the operation flow and you need to destroy the session manually by default. "),Object(a.b)("p",null,"To improve the developer experience, we decided to introduce ",Object(a.b)("inlineCode",{parentName:"p"},"autoDestroy")," flag that automatically destroys the session right after GraphQL execution phase ends, exactly like without an OperationController."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"const controller = app.createOperationController({\n  context: {},\n  autoDestroy: true,\n});\n\n// no need to call `controller.destroy()` now\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Keep on mind that using ",Object(a.b)("inlineCode",{parentName:"p"},"autoDestroy")," means the controller completes its job immediately after execution phase and everything is cleaned up.")))}p.isMDXComponent=!0},166:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return y}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),b=o,y=u["".concat(c,".").concat(b)]||u[b]||d[b]||a;return t?r.a.createElement(y,i(i({ref:n},s),{},{components:t})):r.a.createElement(y,i({ref:n},s))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);