(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5649],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3146:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return i},toc:function(){return l},default:function(){return c}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),s={id:"development-environment",title:"Development Environment",sidebar_label:"Development Environment"},i={unversionedId:"recipes/development-environment",id:"version-legacy/recipes/development-environment",isDocsHomePage:!1,title:"Development Environment",description:"TypeScript",source:"@site/versioned_docs/version-legacy/recipes/development-environment.md",sourceDirName:"recipes",slug:"/recipes/development-environment",permalink:"/docs/legacy/recipes/development-environment",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/development-environment.md",version:"legacy",sidebar_label:"Development Environment",frontMatter:{id:"development-environment",title:"Development Environment",sidebar_label:"Development Environment"},sidebar:"version-legacy/docs",previous:{title:"Test Your Module",permalink:"/docs/legacy/introduction/test-your-module"},next:{title:"Load Your Schema and Resolvers",permalink:"/docs/legacy/recipes/load-your-schema"}},l=[{value:"TypeScript",id:"typescript",children:[{value:"TS-Node <strong><em>(recommended way)</em></strong>",id:"ts-node-recommended-way",children:[]},{value:"Webpack",id:"webpack",children:[]},{value:"TypeScript-Babel-Starter",id:"typescript-babel-starter",children:[]}]},{value:"JavaScript Usage",id:"javascript-usage",children:[{value:"With Babel",id:"with-babel",children:[]},{value:"Without decorators",id:"without-decorators",children:[]}]},{value:"Testing Environment",id:"testing-environment",children:[{value:"Jest",id:"jest",children:[]},{value:"Other Test Runners",id:"other-test-runners",children:[]}]}],p={toc:l};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"typescript"},"TypeScript"),(0,o.kt)("p",null,"GraphQL Modules always supports the latest TypeScript version. Lower versions are not supported!"),(0,o.kt)("h3",{id:"ts-node-recommended-way"},"TS-Node ",(0,o.kt)("strong",{parentName:"h3"},(0,o.kt)("em",{parentName:"strong"},"(recommended way)"))),(0,o.kt)("p",null,"To set up your development environment easily, we recommend to use ",(0,o.kt)("a",{parentName:"p",href:"http://www.typescriptlang.org/"},"TypeScript"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You don't have to use TypeScript, but it makes it much easier to use GraphQL Modules.")),(0,o.kt)("p",null,"To get started with your development environment, install the following tools in your project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D ts-node typescript nodemon\n")),(0,o.kt)("p",null,"Next, create/update ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," in your root directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "experimentalDecorators": true,\n    "module": "commonjs",\n    "target": "es6",\n    "lib": ["es6", "esnext", "es2015"],\n    "noImplicitAny": false,\n    "suppressImplicitAnyIndexErrors": true,\n    "moduleResolution": "node",\n    "emitDecoratorMetadata": true,\n    "sourceMap": true,\n    "declaration": true,\n    "outDir": "./dist",\n    "rootDir": "./src"\n  },\n  "include": ["src/**/*.ts"],\n  "files": ["src/index.ts"],\n  "exclude": ["node_modules"]\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"These configurations facilitate development, but of course you can modify them as you wish. Keep particularly in mind to keep ",(0,o.kt)("inlineCode",{parentName:"p"},"experimentalDecorators: true")," because that's important for GraphQL Modules.")),(0,o.kt)("p",null,"Next, add the following scripts to your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "dev": "nodemon --exec ts-node src/main.ts",\n    "debug": "nodemon --exec node -r ts-node/register --inspect src/index.ts",\n    "build": "tsc",\n    "start": "node dist/index.js"\n  }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dev")," starts your server in the development mode."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"debug")," starts the server in the debug mode."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"build")," uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"tsc")," compiler to compile your code to JavaScript."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"start")," runs the compiled server using pure Node.")),(0,o.kt)("h4",{id:"paths"},(0,o.kt)("inlineCode",{parentName:"h4"},"paths")),(0,o.kt)("p",null,"TypeScript has an ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.typescriptlang.org/docs/handbook/module-resolution.html"},"aliasing mechanism"))," for working with modules directories."),(0,o.kt)("p",null,"To set it up quickly with GraphQL Modules, first add the following package to your server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add tsconfig-paths\n")),(0,o.kt)("p",null,"Then update your scripts to load the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://gist.github.com/jamestalmage/df922691475cff66c7e6"},"require extension"))," for TypeScript ",(0,o.kt)("inlineCode",{parentName:"p"},"paths"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "dev": "nodemon --exec ts-node -r tsconfig-paths/register src/main.ts",\n    "debug": "nodemon --exec ts-node -r tsconfig-paths/register --inspect --debug-brk src/index.ts",\n    "build": "tsc",\n    "start": "node dist/index.js"\n  }\n}\n')),(0,o.kt)("p",null,"And you can add custom mapping to your ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@modules/*": ["./modules/*"]\n    }\n  }\n}\n')),(0,o.kt)("p",null,"You can now import files between modules like below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { SomeProvider } from '@modules/my-module';\n")),(0,o.kt)("h4",{id:"import-from-graphql-files"},"Import from ",(0,o.kt)("inlineCode",{parentName:"h4"},".graphql")," files"),(0,o.kt)("p",null,"You can also treat ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," files as text files and import from them easily.\nIt's useful because many IDEs detect ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," files and do syntax highlighting for them."),(0,o.kt)("p",null,"You can use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/ardatan/graphql-import-node"},"graphql-import-node"))," to enable NodeJS to import ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add graphql-import-node\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import 'graphql-import-node'; // You should add this at the begininng of your entry file.\nimport * as UserTypeDefs from './user.graphql';\n")),(0,o.kt)("h3",{id:"webpack"},"Webpack"),(0,o.kt)("p",null,"If you are using Webpack, we recommend to use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/TypeStrong/ts-loader"},"ts-loader"))," or ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/s-panferov/awesome-typescript-loader"},"awesome-typescript-loader"))," to load your TypeScript files."),(0,o.kt)("p",null,"To load ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," files, you can use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/apollographql/graphql-tag#webpack-preprocessing-with-graphql-tagloader"},"graphql-tag/loader")),"."),(0,o.kt)("p",null,"Here is a simple ",(0,o.kt)("inlineCode",{parentName:"p"},"webpack.config.js")," that should do the job:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  mode: 'development',\n  devtool: 'inline-source-map',\n  entry: './src/index.ts',\n  output: {\n    filename: 'dist/server.js',\n  },\n  resolve: {\n    // Add `.ts` and `.tsx` as a resolvable extension\n    extensions: ['.ts', '.tsx', '.js', '.graphql'],\n    plugins: [new TsconfigPathsPlugin()],\n  },\n  module: {\n    rules: [\n      { test: /\\.tsx?$/, loader: 'ts-loader' },\n      {\n        test: /\\.(graphql|gql)$/,\n        exclude: /node_modules/,\n        loader: 'graphql-tag/loader',\n      },\n    ],\n  },\n};\n")),(0,o.kt)("h3",{id:"typescript-babel-starter"},"TypeScript-Babel-Starter"),(0,o.kt)("p",null,"You can use Babel for TypeScript with GraphQL Modules by using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Microsoft/TypeScript-Babel-Starter"},"TypeScript-Babel-Starter"),"."),(0,o.kt)("p",null,"Still, if you use dependency injection, you have to decorate each property and argument in the providers manually even for the classes like below;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable, Inject } from '@graphql-modules/di';\n@Injectable()\nexport class SomeProvider {\n  constructor(@Inject(OtherProvider) private otherProvider: OtherProvider) {}\n}\n")),(0,o.kt)("h2",{id:"javascript-usage"},"JavaScript Usage"),(0,o.kt)("p",null,"If you are using JavaScript (not TypeScript) in your project, you can either ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html"},"add support for TypeScript"))," or use GraphQL Modules with the JavaScript API."),(0,o.kt)("h3",{id:"with-babel"},"With Babel"),(0,o.kt)("p",null,"If you are using ",(0,o.kt)("a",{parentName:"p",href:"http://babeljs.io"},"Babel")," to transpile your JavaScript files, you can use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"http://babeljs.io/docs/en/babel-plugin-transform-decorators"},"babel-plugin-transform-decorators"))," to get decorators support, which enables using decorators such as ",(0,o.kt)("inlineCode",{parentName:"p"},"@Inject")," in a regular way."),(0,o.kt)("h3",{id:"without-decorators"},"Without decorators"),(0,o.kt)("h4",{id:"dependency-injection"},"Dependency Injection"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Inject")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Injectable")," as regular functions to wrap your arguments and classes from ",(0,o.kt)("inlineCode",{parentName:"p"},"tslib"),"."),(0,o.kt)("p",null,"Take care to add the polyfill ",(0,o.kt)("inlineCode",{parentName:"p"},"reflect-metadata")," and require it (once)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"require('reflect-metadata');\nInject(AProvider)(MyProvider, undefined, 0); // inject AProvider to the first MyProvider constructor argument\nInject(ModuleConfig)(MyProvider, undefined, 0); // inject SimpleModule Config to the second MyProvider constructor argument\nmodule.exports = Injectable({...})(MyProvider);\n")),(0,o.kt)("h2",{id:"testing-environment"},"Testing Environment"),(0,o.kt)("p",null,"We recommend Jest as your test runner: it has a simple API, it's super fast and you can integrate it with any CI tools."),(0,o.kt)("h3",{id:"jest"},"Jest"),(0,o.kt)("p",null,"To test your GraphQL Modules server with Jest, first add support for TypeScript to your Jest instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D jest @types/jest ts-jest\n")),(0,o.kt)("p",null,"Then, add the following section to your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jest": {\n    "transform": {\n      "^.+\\\\.tsx?$": "ts-jest"\n    },\n    "testRegex": "(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$",\n    "moduleFileExtensions": ["ts", "tsx", "js", "jsx", "json", "node"]\n  }\n}\n')),(0,o.kt)("p",null,"And add a script to your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "test": "jest"\n  }\n}\n')),(0,o.kt)("p",null,"Also, make sure that each one of your spec files starts with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import 'reflect-metadata';\n")),(0,o.kt)("h3",{id:"other-test-runners"},"Other Test Runners"),(0,o.kt)("p",null,"You can use any other test runner you prefer.\nJust figure out how to use it with TypeScript and make sure you can import CommonJS easily."))}c.isMDXComponent=!0}}]);