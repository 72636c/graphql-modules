"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4146],{4137:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return m}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=t.createContext({}),p=function(e){var r=t.useContext(a),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},u=function(e){var r=p(e.components);return t.createElement(a.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(a,".").concat(m)]||d[m]||c[m]||i;return n?t.createElement(f,s(s({ref:r},u),{},{components:n})):t.createElement(f,s({ref:r},u))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var a in r)hasOwnProperty.call(r,a)&&(l[a]=r[a]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3553:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var t=n(7462),o=n(3366),i=(n(7294),n(4137)),s=["components"],l={id:"implement-providers",title:"Implement Your Providers",sidebar_label:"Implement Providers"},a=void 0,p={unversionedId:"introduction/implement-providers",id:"version-legacy/introduction/implement-providers",isDocsHomePage:!1,title:"Implement Your Providers",description:"When your app grows and becomes more complex, you can use Providers - classes that implement your resolvers' logic.",source:"@site/versioned_docs/version-legacy/introduction/implement-providers.md",sourceDirName:"introduction",slug:"/introduction/implement-providers",permalink:"/docs/legacy/introduction/implement-providers",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/introduction/implement-providers.md",tags:[],version:"legacy",frontMatter:{id:"implement-providers",title:"Implement Your Providers",sidebar_label:"Implement Providers"},sidebar:"version-legacy/docs",previous:{title:"Implement Resolvers",permalink:"/docs/legacy/introduction/implement-resolvers"},next:{title:"Understanding Session",permalink:"/docs/legacy/introduction/understanding-session"}},u=[],c={toc:u};function d(e){var r=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When your app grows and becomes more complex, you can use ",(0,i.kt)("strong",{parentName:"p"},"Providers")," - classes that implement your resolvers' logic."),(0,i.kt)("p",null,"You can define a provider and add it to your module."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modules/my-module/user.provider.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable } from '@graphql-modules/di';\n\n@Injectable()\nexport class UserProvider {\n  users = [\n    {\n      _id: '0',\n      username: 'jhon',\n    },\n  ];\n  getUserById(id) {\n    return this.users.find((user) => user._id === id);\n  }\n}\n")),(0,i.kt)("p",null,"Define a simple schema."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modules/my-module/schema.graphql")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  user(id: ID!): User\n}\n\ntype User {\n  id: ID!\n  username: String!\n}\n")),(0,i.kt)("p",null,"And inject the data using the ",(0,i.kt)("inlineCode",{parentName:"p"},"injector")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," of your resolvers."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modules/my-module/resolvers.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport { UserProvider } from './user.provider';\nexport default {\n  Query: {\n    user: (root, { id }, { injector }) =>\n      injector.get(UserProvider).getUserById(id),\n  },\n  User: {\n    id: (user) => user._id,\n    username: (user) => user.username,\n  },\n};\n")),(0,i.kt)("p",null,"Then add all these in your module definition."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modules/my-module/index.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport * as typeDefs from './schema.graphql';\nimport resolvers from './resolvers';\nimport { UserProvider } from './user.provider';\n\nexport const MyModule = new GraphQLModule({\n  typeDefs,\n  resolvers,\n  providers: [UserProvider],\n});\n")))}d.isMDXComponent=!0}}]);