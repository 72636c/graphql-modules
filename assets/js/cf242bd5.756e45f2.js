"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4487],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9375:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var r=n(7462),i=n(3366),o=(n(7294),n(4137)),a=["components"],l={id:"type-definitions",title:"Type Definitions",sidebar_label:"Type Definitions (SDL)"},p=void 0,s={unversionedId:"essentials/type-definitions",id:"essentials/type-definitions",isDocsHomePage:!1,title:"Type Definitions",description:"GraphQL Schema is built out of types, enums, interfaces and so on. Defining or extending them in GraphQL Modules is fairly simple.",source:"@site/docs/essentials/type-definitions.md",sourceDirName:"essentials",slug:"/essentials/type-definitions",permalink:"/docs/essentials/type-definitions",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/essentials/type-definitions.md",tags:[],version:"current",frontMatter:{id:"type-definitions",title:"Type Definitions",sidebar_label:"Type Definitions (SDL)"},sidebar:"docs",previous:{title:"Get Started",permalink:"/docs/get-started"},next:{title:"Resolvers",permalink:"/docs/essentials/resolvers"}},u=[{value:"Storing SDL in <code>.graphql</code> files",id:"storing-sdl-in-graphql-files",children:[]},{value:"Dynamically Load SDL files",id:"dynamically-load-sdl-files",children:[]}],d={toc:u};function c(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GraphQL Schema is built out of ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),"s, ",(0,o.kt)("inlineCode",{parentName:"p"},"enum"),"s, ",(0,o.kt)("inlineCode",{parentName:"p"},"interface"),"s and so on. Defining or extending them in GraphQL Modules is fairly simple."),(0,o.kt)("p",null,"Just like GraphQL Schema, GraphQL Modules follow the same rules of writing SDL (Schema Definition Language), a single definition per type and multiple extensions. This way we force a good pattern and clarify ownership of each type."),(0,o.kt)("p",null,"To get started with type definitions in your module, make sure to use ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," (you can import it from ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-modules"),") or ",(0,o.kt)("inlineCode",{parentName:"p"},"parse")," (from ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql"),") to convert your string SDL definition into a ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentNode")," object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createModule, gql } from 'graphql-modules';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: gql`\n    type Query {\n      user(id: ID!): User\n    }\n\n    type User {\n      id: ID!\n      username: String!\n    }\n  `,\n});\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),"s could be possible but we decided to force a better pattern. Using ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," tag means your IDE can highlight the GraphQL SDL and in general works better with other tools from the GraphQL ecosystem.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"TIP: ",(0,o.kt)("inlineCode",{parentName:"p"},"typeDefs")," can be single item, or an array of multiple.")),(0,o.kt)("h2",{id:"storing-sdl-in-graphql-files"},"Storing SDL in ",(0,o.kt)("inlineCode",{parentName:"h2"},".graphql")," files"),(0,o.kt)("p",null,"If you wish to write your GraphQL SDL in a ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," file, you need to make sure you are able to load it correctly in a NodeJS environment."),(0,o.kt)("p",null,"To do so, use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-import-node"},(0,o.kt)("inlineCode",{parentName:"a"},"graphql-import-node"))," to make this process easier:"),(0,o.kt)("p",null,"Start by installing it, and follow the installation instructions, based on your environment and your setup."),(0,o.kt)("p",null,"Now, store your SDL in a ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," file(s), and load it this way, with ",(0,o.kt)("inlineCode",{parentName:"p"},"import")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"require"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import MyQueryType from './query.type.graphql';\nimport { createModule } from 'graphql-modules';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: [MyQueryType],\n});\n")),(0,o.kt)("h2",{id:"dynamically-load-sdl-files"},"Dynamically Load SDL files"),(0,o.kt)("p",null,"If you have too many SDL files and you wish to load it dynamically, you can use loaders from ",(0,o.kt)("inlineCode",{parentName:"p"},"@graphql-tools/load-files"),"!"),(0,o.kt)("p",null,"Start by installing this package:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add @graphql-tools/load-files\n")),(0,o.kt)("p",null,"Next, use it to load your files dynamically:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import MyQueryType from './query.type.graphql';\nimport { createModule } from 'graphql-modules';\nimport { loadFilesSync } from '@graphql-tools/load-files';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  dirname: __dirname,\n  typeDefs: loadFilesSync(join(__dirname, './typeDefs/*.graphql')),\n});\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: the default implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"loadFilesSync")," is using ",(0,o.kt)("inlineCode",{parentName:"p"},"fs")," module. If you are using ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-import-node"),", you can add a 2nd parameter with configuration: ",(0,o.kt)("inlineCode",{parentName:"p"},"{ useRequire: true }"),".")))}c.isMDXComponent=!0}}]);