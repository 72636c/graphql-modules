"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4387],{4137:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return m}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},u=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return n?t.createElement(h,l(l({ref:r},u),{},{components:n})):t.createElement(h,l({ref:r},u))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},174:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var t=n(7462),o=n(3366),a=(n(7294),n(4137)),l=["components"],i={id:"load-your-schema",title:"Load Your Schema and Resolvers",sidebar_label:"Load Your Schema and Resolvers"},s=void 0,p={unversionedId:"recipes/load-your-schema",id:"version-legacy/recipes/load-your-schema",isDocsHomePage:!1,title:"Load Your Schema and Resolvers",description:"There are multiple ways to load your schema, and GraphQL Modules tries to make it easy for you.",source:"@site/versioned_docs/version-legacy/recipes/load-your-schema.md",sourceDirName:"recipes",slug:"/recipes/load-your-schema",permalink:"/docs/legacy/recipes/load-your-schema",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/load-your-schema.md",tags:[],version:"legacy",frontMatter:{id:"load-your-schema",title:"Load Your Schema and Resolvers",sidebar_label:"Load Your Schema and Resolvers"},sidebar:"version-legacy/docs",previous:{title:"Development Environment",permalink:"/docs/legacy/recipes/development-environment"},next:{title:"Communication Between Modules",permalink:"/docs/legacy/recipes/communication-between-modules"}},u=[{value:"Using <code>sonar</code> in <code>graphql-toolkit</code>",id:"using-sonar-in-graphql-toolkit",children:[],level:2},{value:"Using imports and <code>graphql-import-node</code>",id:"using-imports-and-graphql-import-node",children:[],level:2},{value:"As a string",id:"as-a-string",children:[],level:2}],c={toc:u};function d(e){var r=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There are multiple ways to load your schema, and GraphQL Modules tries to make it easy for you."),(0,a.kt)("h2",{id:"using-sonar-in-graphql-toolkit"},"Using ",(0,a.kt)("inlineCode",{parentName:"h2"},"sonar")," in ",(0,a.kt)("inlineCode",{parentName:"h2"},"graphql-toolkit")),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-toolkit"),", it has a powerful mechanism for finding and loading your schema and resolvers files."),(0,a.kt)("p",null,"Along with ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-toolkit"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"sonar"),", you can separate your GraphQL schema definition and resolvers to smaller parts, and load them without directly specifying files."),(0,a.kt)("p",null,"For example, given the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"modules/\n    my-module/\n        index.ts\n        schema/\n            user.graphql\n            query.graphql\n            mutation.graphql\n        resolvers/\n            user.ts\n            query.ts\n            mutation.ts\n")),(0,a.kt)("p",null,"You can easily load all of your ",(0,a.kt)("inlineCode",{parentName:"p"},".graphql")," files and ",(0,a.kt)("inlineCode",{parentName:"p"},".ts")," resolvers files like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport { loadResolversFiles, loadSchemaFiles } from 'graphql-toolkit';\n\nexport const UserModule = new GraphQLModule({\n  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n});\n")),(0,a.kt)("p",null,"This way, you don't have to specify each file and each resolver; the tools will do it for you."),(0,a.kt)("h2",{id:"using-imports-and-graphql-import-node"},"Using imports and ",(0,a.kt)("inlineCode",{parentName:"h2"},"graphql-import-node")),(0,a.kt)("p",null,"You can also write your schema and resolvers in different files and then import them using ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/ardatan/graphql-import-node"},"graphql-import-node")),":"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"modules/my-module/index.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport resolvers from './resolvers';\nimport * as typeDefs from './schema.graphql';\n\nexport const UserModule = new GraphQLModule({\n  resolvers,\n  typeDefs,\n});\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"modules/my-module/resolvers.ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  User: {\n    id: () => {},\n  },\n  Query: {\n    user: () => {},\n  },\n};\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"modules/my-module/schema.graphql")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"type User {\n  id: String\n}\n\ntype Query {\n  user(id: Int!): User\n}\n")),(0,a.kt)("h2",{id:"as-a-string"},"As a string"),(0,a.kt)("p",null,"The simplest way to load your schema and resolvers into a module is to write them directly on your ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLModule")," definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport gql from 'graphql-tag';\n\nexport const UserModule = new GraphQLModule({\n  resolvers: {\n    User: {\n      id: () => {},\n    },\n    Query: {\n      user: () => {},\n    },\n  },\n  typeDefs: gql`\n    type User {\n      id: String\n    }\n\n    type Query {\n      user(id: Int!): User\n    }\n  `,\n});\n")))}d.isMDXComponent=!0}}]);