(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9552],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=i,b=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return t?r.createElement(b,s(s({ref:n},c),{},{components:t})):r.createElement(b,s({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6493:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return l},default:function(){return c}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),s={id:"microservices",title:"Microservices",sidebar_label:"Microservices"},o={unversionedId:"recipes/microservices",id:"version-legacy/recipes/microservices",isDocsHomePage:!1,title:"Microservices",description:"Exposing Unified Schema",source:"@site/versioned_docs/version-legacy/recipes/microservices.md",sourceDirName:"recipes",slug:"/recipes/microservices",permalink:"/docs/legacy/recipes/microservices",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/microservices.md",version:"legacy",sidebar_label:"Microservices",frontMatter:{id:"microservices",title:"Microservices",sidebar_label:"Microservices"},sidebar:"version-legacy/docs",previous:{title:"Communication Between Modules",permalink:"/docs/legacy/recipes/communication-between-modules"},next:{title:"Fetch External Data Using Data Sources",permalink:"/docs/legacy/recipes/data-sources"}},l=[{value:"Exposing Unified Schema",id:"exposing-unified-schema",children:[]},{value:"Communication Between Servers",id:"communication-between-servers",children:[{value:"Redis PubSub",id:"redis-pubsub",children:[]},{value:"Existing Implementations for PubSub",id:"existing-implementations-for-pubsub",children:[]}]}],u={toc:l};function c(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"exposing-unified-schema"},"Exposing Unified Schema"),(0,a.kt)("p",null,"If you wish to separate your server to smaller parts and deploy them as microservices, you can use GraphQL Modules in the way you are used to."),(0,a.kt)("p",null,"That means that you can still implement small servers and then use ",(0,a.kt)("strong",{parentName:"p"},"Schema Stitching")," to merge your small GraphQL schemas into a unified schema."),(0,a.kt)("h2",{id:"communication-between-servers"},"Communication Between Servers"),(0,a.kt)("p",null,"You can also use ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://www.apollographql.com/docs/apollo-server/features/subscriptions.html#PubSub-Implementations"},(0,a.kt)("inlineCode",{parentName:"a"},"PubSub")))," to implement messaging mechanism between GraphQL Modules servers."),(0,a.kt)("p",null,"The default and built-in implementation of the ",(0,a.kt)("inlineCode",{parentName:"p"},"PubSub")," uses ",(0,a.kt)("inlineCode",{parentName:"p"},"EventEmitter"),".\nSince it's a very simple API, you can implement your own way of sending messages."),(0,a.kt)("p",null,"You can implement your own message transmitter by implementing ",(0,a.kt)("inlineCode",{parentName:"p"},"PubSub")," interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class MyPubSub {\n  subscribe<T = any>(event: string, handler: (payload: T) => void): { unsubscribe: () => void } {\n    // 1. You need to keep a record between the event and the handler\n\n    return {\n      unsubscribe: () => y{\n        // 2. Here you need to implement the logic for unsubscribing for the event\n      },\n    };\n  }\n\n  publish<T = any>(event: string, payload: T): void {\n    // 3. Here you need to implement to logic for publishing a new message\n  }\n}\n")),(0,a.kt)("p",null,"Make sure to use it in a ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLModule")," declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\n\nconst CommunicationModule = new GraphQLModule({\n  provider: [MyPubSub],\n  /* ... */\n});\n")),(0,a.kt)("p",null,"Finally, import ",(0,a.kt)("inlineCode",{parentName:"p"},"CommunicationModule")," to all other modules where you wish to use ",(0,a.kt)("inlineCode",{parentName:"p"},"PubSub"),"."),(0,a.kt)("h3",{id:"redis-pubsub"},"Redis PubSub"),(0,a.kt)("p",null,"Another useful trick is to use external PubSub services such as ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://redis.io/topics/pubsub"},"Redis PubSub")),"."),(0,a.kt)("p",null,"You can easily create a ",(0,a.kt)("inlineCode",{parentName:"p"},"RedisPubSub")," this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as redis from 'redis';\n\nexport class PubSub {\n  _client = null;\n\n  constructor() {\n    this._client = redis.createClient();\n  }\n\n  subscribe<T = any>(\n    event: string,\n    handler: (payload: T) => void\n  ): { unsubscribe: () => void } {\n    this._client.subscribe(event);\n\n    this._client.on('message', function (channel, message) {\n      if (channel !== event) {\n        return;\n      }\n\n      handler(JSON.parse(message));\n    });\n\n    return {\n      unsubscribe: () => {\n        this._client.unsubscribe(event);\n      },\n    };\n  }\n\n  publish<T = any>(event: string, payload: T): void {\n    this._client.publish(event, JSON.stringify(payload));\n  }\n}\n")),(0,a.kt)("h3",{id:"existing-implementations-for-pubsub"},"Existing Implementations for PubSub"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"PubSub")," can be replaced by other implementations.\nThe following are existing ready-to-use implementations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/davidyaha/graphql-redis-subscriptions"},"Redis"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/axelspringer/graphql-google-pubsub"},"Google PubSub"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/davidyaha/graphql-mqtt-subscriptions"},"MQTT enabled broker"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/cdmbase/graphql-rabbitmq-subscriptions"},"RabbitMQ"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/ancashoria/graphql-kafka-subscriptions"},"Kafka"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/GraphQLCollege/graphql-postgres-subscriptions"},"Postgres")))))}c.isMDXComponent=!0}}]);