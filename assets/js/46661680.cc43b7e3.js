"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1385],{4137:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return m}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),d=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=d(e.components);return t.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(r),m=o,y=u["".concat(c,".").concat(m)]||u[m]||l[m]||a;return r?t.createElement(y,i(i({ref:n},p),{},{components:r})):t.createElement(y,i({ref:n},p))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6060:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var t=r(7462),o=r(3366),a=(r(7294),r(4137)),i=["components"],s={id:"data-loader",title:"Solve N+1 Using DataLoader",sidebar_label:"Solve N+1 Using DataLoader"},c=void 0,d={unversionedId:"recipes/data-loader",id:"version-legacy/recipes/data-loader",isDocsHomePage:!1,title:"Solve N+1 Using DataLoader",description:"DataLoader is a generic library which aims to solve the n+1 issue in large-scale GraphQL Applications.",source:"@site/versioned_docs/version-legacy/recipes/data-loader.md",sourceDirName:"recipes",slug:"/recipes/data-loader",permalink:"/docs/legacy/recipes/data-loader",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/data-loader.md",version:"legacy",frontMatter:{id:"data-loader",title:"Solve N+1 Using DataLoader",sidebar_label:"Solve N+1 Using DataLoader"},sidebar:"version-legacy/docs",previous:{title:"Fetch External Data Using Data Sources",permalink:"/docs/legacy/recipes/data-sources"},next:{title:"File Uploads using GraphQL Upload",permalink:"/docs/legacy/recipes/file-uploads"}},p=[{value:"As Provider",id:"as-provider",children:[{value:"With Dependency Injection",id:"with-dependency-injection",children:[]},{value:"With Authentication Token",id:"with-authentication-token",children:[]}]},{value:"In Providers with Dependency Injection",id:"in-providers-with-dependency-injection",children:[]}],l={toc:p};function u(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"DataLoader is a generic library which aims to solve the ",(0,a.kt)("inlineCode",{parentName:"p"},"n+1")," issue in large-scale GraphQL Applications.\nYou can ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/facebook/dataloader"},"read more about DataLoader")),"."),(0,a.kt)("p",null,"DataLoader can be used in GraphQL Modules with an easy setup.\nYou can use them as providers or in providers.\nIf you want to use them as providers, you can extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"DataLoader")," class to benefit dependency injection or wrap factory functions with ",(0,a.kt)("inlineCode",{parentName:"p"},"Inject"),".\n",(0,a.kt)("inlineCode",{parentName:"p"},"ProviderScope.Session")," is recommended for this usage because ",(0,a.kt)("inlineCode",{parentName:"p"},"DataLoader")," works on a cache-per-request mechanism."),(0,a.kt)("h2",{id:"as-provider"},"As Provider"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport { ProviderScope } from '@graphql-modules/di';\nimport DataLoader from 'dataloader';\n\nexport const USER_DATA_LOADER = Symbol('USER_DATA_LOADER');\nexport const UserModule = new GraphQLModule({\n  providers: [\n    {\n      provide: USER_DATA_LOADER,\n      scope: ProviderScope.Session,\n      useFactory: () => new DataLoader(keys => myBatchGetUsers(keys));\n    }\n  ],\n  resolvers: {\n    Query: {\n      getUserById: (root, args, context) => context.injector.get(USER_DATA_LOADER).load(args.id)\n    }\n  }\n});\n")),(0,a.kt)("h3",{id:"with-dependency-injection"},"With Dependency Injection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport { InjectFunction } from '@graphql-modules/di';\nimport { MyExternalDataProvider } from './my-external-data-provider';\n\nexport const USER_DATA_LOADER = Symbol('USER_DATA_LOADER');\nexport const UserModule = new GraphQLModule({\n  providers: [\n    {\n      provide: USER_DATA_LOADER,\n      scope: ProviderScope.Session,\n      useFactory: InjectFunction(MyExternalDataProvider)(\n        (myExternalDataProvider) =>\n          new DataLoader((keys) => myExternalDataProvider.getData(keys))\n      ),\n    },\n  ],\n  resolvers: {\n    Query: {\n      getUserById: (root, args, { injector }) =>\n        injector.get(USER_DATA_LOADER).load(args.id),\n    },\n  },\n});\n")),(0,a.kt)("h3",{id:"with-authentication-token"},"With Authentication Token"),(0,a.kt)("p",null,"You can see how to generate DataLoader in GraphQLModules using factory functions and dependency injection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule, ModuleSessionInfo } from '@graphql-modules/core';\nimport { InjectFunction, ProviderScope } from '@graphql-modules/di';\n\nexport const USER_DATA_LOADER = Symbol('USER_DATA_LOADER');\nexport const UserModule = new GraphQLModule({\n  providers: [\n    {\n      scope: ProviderScope.Session\n      provide: USER_DATA_LOADER,\n      useFactory:\n        InjectFunction(ModuleSessionInfo)(\n          // Use dependency injection to get `ModuleSessionInfo` and access network session\n          ({ session }) => new DataLoader(\n            ids => genUsers(session.req.authToken, ids)\n          )\n        )\n    }\n  ],\n  resolvers: {\n    Query: {\n      getUserById: (root, { id }, { injector }) => injector.get(USER_DATA_LOADER).load(id)\n    }\n  }\n});\n")),(0,a.kt)("h2",{id:"in-providers-with-dependency-injection"},"In Providers with Dependency Injection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable, ProviderScope } from '@graphql-modules/di';\nimport DataLoader from 'dataloader';\nimport { MyExternalDataProvider } from './my-external-data-provider';\n\n@Injectable({\n  scope: ProviderScope.Session,\n})\nexport class UserProvider {\n  private dataLoader = new DataLoader((keys) =>\n    this.myDataProvider.findUsers(keys)\n  );\n  constructor(private myDataProvider: MyExternalDataProvider) {}\n  getUserById(userId: string) {\n    return this.dataLoader.load(userId);\n  }\n}\n")))}u.isMDXComponent=!0}}]);