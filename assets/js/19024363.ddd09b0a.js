"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2750],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return y}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),y=a,m=d["".concat(p,".").concat(y)]||d[y]||c[y]||o;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7658:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(4137)),s=["components"],i={id:"type-safety",title:"Type-Safety",sidebar_label:"Type Safety"},p=void 0,l={unversionedId:"essentials/type-safety",id:"essentials/type-safety",isDocsHomePage:!1,title:"Type-Safety",description:"If you are using TypeScript, and you wish to get a better integration for GraphQL and TypeScript while writing your API and resolvers, we have a few tools that might make it simple for you.",source:"@site/docs/essentials/type-safety.md",sourceDirName:"essentials",slug:"/essentials/type-safety",permalink:"/docs/essentials/type-safety",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/essentials/type-safety.md",tags:[],version:"current",frontMatter:{id:"type-safety",title:"Type-Safety",sidebar_label:"Type Safety"},sidebar:"docs",previous:{title:"Context",permalink:"/docs/essentials/context"},next:{title:"Testing",permalink:"/docs/essentials/testing"}},u=[{value:"Shaping Context type",id:"shaping-context-type",children:[]},{value:"Using Context type",id:"using-context-type",children:[]},{value:"Strict Resolvers Types",id:"strict-resolvers-types",children:[]}],c={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you are using TypeScript, and you wish to get a better integration for GraphQL and TypeScript while writing your API and resolvers, we have a few tools that might make it simple for you."),(0,o.kt)("h2",{id:"shaping-context-type"},"Shaping Context type"),(0,o.kt)("p",null,"GraphQL Modules exposes a global namespace called ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLModules"),", so there's no need to pass the same signature over and over again as part of generic types of different APIs. This namespace includes the ",(0,o.kt)("inlineCode",{parentName:"p"},"Context")," type."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLModules.Context")," is a global interface exposed for you by GraphQL Modules and allow you to easily type your ",(0,o.kt)("inlineCode",{parentName:"p"},"context")," object. It is global and shared across modules and application which means you can define it once and it applies automatically everywhere."),(0,o.kt)("p",null,"To extend ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLModules.Context"),", add a declaration statement in your code to add new type properties to ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLModules.GlobalContext")," (which makes up part of ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLModules.Context"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"declare global {\n  namespace GraphQLModules {\n    interface GlobalContext {\n      request: RequestType;\n      customData: customDataType;\n    }\n  }\n}\n")),(0,o.kt)("p",null,"Now every piece of GraphQL Modules understands the context type and you gain much stronger type-safety. Changes to ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLModules.Context")," will get updated automatically wherever it is used."),(0,o.kt)("h2",{id:"using-context-type"},"Using Context type"),(0,o.kt)("p",null,"Now that you've extended the ",(0,o.kt)("inlineCode",{parentName:"p"},"Context")," type based on your actual context shape, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLModules.Context")," while writing your resolvers. "),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLModules.Context")," is simple and because GraphQL Modules makes it a globally available type, you just use it, there's no need to import it from ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-modules")," package. You can use it directly in your resolvers by typing the ",(0,o.kt)("inlineCode",{parentName:"p"},"context")," argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const resolvers = {\n  Query: {\n    myQuery(root, args, context: GraphQLModules.Context, info) {\n      // ...\n    },\n  },\n};\n")),(0,o.kt)("p",null,"Or assign it globally with ",(0,o.kt)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/docs/presets/graphql-modules"},"Graphql Code Generator"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: './src/modules/*.graphql'\ngenerates:\n  ./src/modules/:\n    preset: graphql-modules\n    config:\n      contextType: 'GraphQLModules.Context', # Your extended context type!\n    presetConfig:\n      baseTypesPath: ../generated/schema-types.ts\n      filename: generated/module-types.ts\n    plugins:\n      - typescript\n      - typescript-resolvers\n     ...\n")),(0,o.kt)("h2",{id:"strict-resolvers-types"},"Strict Resolvers Types"),(0,o.kt)("p",null,"If you wish to have even more control over you implementation, you can use GraphQL-Code-Generator to generate resolvers signature types per each module you write. This is useful because this way you can find issues during development/build time, and get complete type-safety and auto-complete in your IDE."),(0,o.kt)("p",null,"We created a special GraphQL-Code-Generator ",(0,o.kt)("inlineCode",{parentName:"p"},"preset")," for that purpose. It generates a complete, unified, type signature for your schema, and sub-files per each module, containing only the GraphQL types declared/extended in your specific module."),(0,o.kt)("p",null,"To get started, ",(0,o.kt)("a",{parentName:"p",href:"https://graphql-code-generator.com/docs/presets/graphql-modules"},"follow the instructions in ",(0,o.kt)("inlineCode",{parentName:"a"},"graphql-code-generator.com")," website"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"TIP: To get the most out of your GraphQL-Code-Generator integration, please ",(0,o.kt)("a",{parentName:"p",href:"https://the-guild.dev/blog/better-type-safety-for-resolvers-with-graphql-codegen"},"refer to this blog post"),". You can use your own model types, automatically type ",(0,o.kt)("inlineCode",{parentName:"p"},"parent")," value of your resolvers, have a fine-grain control of the output and much more!")))}d.isMDXComponent=!0}}]);