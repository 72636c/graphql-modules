(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{152:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(9),o=(n(0),n(170)),i={id:"type-graphql",title:"TypeGraphQL Integration",sidebar_label:"TypeGraphQL"},p={unversionedId:"recipes/type-graphql",id:"version-legacy/recipes/type-graphql",isDocsHomePage:!1,title:"TypeGraphQL Integration",description:"TypeGraphQL is a set of tools that provides you some decorators that can be used for writing your GraphQL definitions.",source:"@site/versioned_docs/version-legacy/recipes/type-graphql.md",slug:"/recipes/type-graphql",permalink:"/docs/legacy/recipes/type-graphql",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/type-graphql.md",version:"legacy",sidebar_label:"TypeGraphQL",sidebar:"version-legacy/docs",previous:{title:"Integrate With GraphQL Inspector",permalink:"/docs/legacy/recipes/graphql-inspector"},next:{title:"Nexus Integration",permalink:"/docs/legacy/recipes/nexus"}},s=[{value:"Integration with other implementations",id:"integration-with-other-implementations",children:[]}],c={toc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TypeGraphQL")," is a set of tools that provides you some decorators that can be used for writing your GraphQL definitions.\nYou can define your type definitions and resolvers using ",Object(o.b)("strong",{parentName:"p"},"TypeScript")," classes thanks to ",Object(o.b)("strong",{parentName:"p"},"TypeGraphQL")," decorators.\nYou can check out ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://typegraphql.com/"},"TypeGraphQL documents"))," to learn more."),Object(o.b)("p",null,"Important: Make sure you follow the ",Object(o.b)("a",{parentName:"p",href:"https://typegraphql.com/docs/installation.html"},"installation steps"),", such as installing ",Object(o.b)("inlineCode",{parentName:"p"},"reflect-metadata")," and configuring your typescript correctly."),Object(o.b)("p",null,"On the other hand, GraphQL Modules provides encapsulated dependency injection which allows you to seperate your logic from resolvers.\nIt makes testing easy, because you can mock providers and stuff for dependency indejection.\nYou can write standalone modules in a code-first way."),Object(o.b)("p",null,"You can import the schema that is generated by TypeGraphQL in your GraphQL Module."),Object(o.b)("p",null,"Let's assume we have a ",Object(o.b)("inlineCode",{parentName:"p"},"Chat")," type for base fields shared with the entity."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"chat.type.ts")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { ObjectType, Field, ID } from 'type-graphql';\n\n@ObjectType()\nexport class Chat {\n  @Field((type) => ID)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field({ nullable: true })\n  description?: string;\n}\n")),Object(o.b)("p",null,"Create another class for our queries and mutations based on this type:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"chat.resolver.ts")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { ChatsProvider } from './chats.provider';\nimport { Resolver, Mutation, Arg, Int, Query } from 'type-graphql';\nimport { Chat } from './chat.type';\n\n@Resolver((of) => Chat)\nexport class ChatResolver {\n  constructor(private chatsProvider: ChatsProvider) {}\n\n  @Query((returns) => [Chat])\n  chats() {\n    return this.chatsProvider.getChats();\n  }\n\n  @Query((returns) => Chat)\n  chat(@Arg('id') id: number) {\n    return this.chatsProvider.getChat(id);\n  }\n\n  @Mutation((returns) => Chat)\n  createChat(\n    @Arg('title') title: string,\n    @Arg('description') description: string\n  ) {\n    return this.chatsProvider.createChat({\n      id: Math.random(),\n      title,\n      description,\n    });\n  }\n\n  @Mutation((returns) => Int)\n  deleteChat(@Arg('id') id: number) {\n    return this.chatsProvider.deleteChat(id);\n  }\n}\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"We can use dependency injection of GraphQL Modules in TypeGraphQL. Resolvers and Providers are part of dependency injection in that case.")),Object(o.b)("p",null,"Then let's create our module:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"chat.module.ts")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport { ChatsProvider } from './chats.provider';\nimport { buildSchemaSync } from 'type-graphql';\nimport { ChatResolver } from './chat.resolver';\nimport { Chat } from './chat.type';\n\nconst resolvers = [ChatResolver];\n\nexport const ChatsModule = new GraphQLModule({\n  providers: [ChatsProvider, ...resolvers],\n  extraSchemas: [\n    buildSchemaSync({\n      resolvers,\n      container: ({ context }) =>\n        ChatsModule.injector.getSessionInjector(context),\n    }),\n  ],\n});\n")),Object(o.b)("p",null,"We have to define resolver classes as providers because they are also part of our dependency injection.\n",Object(o.b)("inlineCode",{parentName:"p"},"container: ({ context }) => ChatsModule.injector.getSessionInjector(context)")," tells TypeGraphQL to use the ",Object(o.b)("inlineCode",{parentName:"p"},"ChatsModule")," dependency injection container for those resolvers."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Check out ",Object(o.b)("a",{parentName:"p",href:"https://github.com/ardatan/TypeGraphQLModules"},"our example with TypeGraphQL"),".")),Object(o.b)("h2",{id:"integration-with-other-implementations"},"Integration with other implementations"),Object(o.b)("p",null,"You can merge different modules from different implementations like below.\nSo you don't have to use the same implementation method in all modules.\nGraphQL Modules will handle schema merging for you, even if they are from different implementations."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"new GraphQLModule({\n  imports: [\n    XModuleCreatedUsingSchemaFirst,\n    YModuleCreatedUsingNexus,\n    ZModuleCreatedUsingTypeGraphQL,\n  ],\n});\n")))}l.isMDXComponent=!0},170:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),l=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,b=u["".concat(i,".").concat(h)]||u[h]||d[h]||o;return n?a.a.createElement(b,p(p({ref:t},c),{},{components:n})):a.a.createElement(b,p({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);