(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{133:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return m}));var o=t(0),r=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},f=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),s=p(t),f=o,m=s["".concat(c,".").concat(f)]||s[f]||d[f]||i;return t?r.a.createElement(m,a(a({ref:n},l),{},{components:t})):r.a.createElement(m,a({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=t[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},72:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return a})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return p}));var o=t(3),r=t(8),i=(t(0),t(133)),c={id:"configuration",title:"Module Configuration",sidebar_label:"Module Configuration"},a={unversionedId:"introduction/configuration",id:"version-legacy/introduction/configuration",isDocsHomePage:!1,title:"Module Configuration",description:"Each module can have its own configuration, and you can specify it in your GraphQLModule.",source:"@site/versioned_docs/version-legacy/introduction/configuration.md",slug:"/introduction/configuration",permalink:"/docs/legacy/introduction/configuration",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/introduction/configuration.md",version:"legacy",sidebar_label:"Module Configuration",sidebar:"version-legacy/docs",previous:{title:"Dependency Injection",permalink:"/docs/legacy/introduction/dependency-injection"},next:{title:"Context",permalink:"/docs/legacy/introduction/context"}},u=[],l={toc:u};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Each module can have its own configuration, and you can specify it in your ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQLModule"),"."),Object(i.b)("p",null,"Start by creating a TypeScript interface that specifies the structure of your configuration object, and pass it as the first generic argument to your ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQLModule"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport { MyProvider } from './my-provider.ts';\n\nexport interface MyModuleConfig {\n  secretKey: string;\n  remoteEndpoint: string;\n  someDbInstance: SomeDBInstance;\n}\n\n// You can access the config object like below inside the module declaration\nexport const MyModule = new GraphQLModule<MyModuleConfig>({\n  providers: ({ config: { someDbInstance } }) => [\n    MyProvider,\n    {\n      provide: SomeDbInstance,\n      useValue: someDbInstance,\n    },\n  ],\n});\n")),Object(i.b)("p",null,"To provide the configuration values, add ",Object(i.b)("inlineCode",{parentName:"p"},".forRoot")," to your module when you load it:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport { MyModule } from './modules/my-module';\n\nconst AnotherModule = new GraphQLModule({\n  imports: [\n    MyModule.forRoot({\n      secretKey: '123',\n      remoteEndpoint: 'http://my-other-service.com',\n    }),\n  ],\n});\n")),Object(i.b)("p",null,"To get access to your configuration in your ",Object(i.b)("inlineCode",{parentName:"p"},"Provider"),"s, inject ",Object(i.b)("inlineCode",{parentName:"p"},"MyModuleConfig"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { ModuleConfig } from '@graphql-modules/core';\nimport { Inject, Injectable } from '@graphql-modules/di';\nimport { MyModule } from './my-module.ts';\n\n@Injectable()\nexport class MyProvider {\n  constructor(@Inject(ModuleConfig) private config: MyModuleConfig) {\n    ...\n  }\n\n  async fetchData() {\n    return fetch({\n      url: this.config.remoteEndpoint.\n      body: {\n        key: this.config.secretKey,\n      }\n    });\n  }\n}\n")))}p.isMDXComponent=!0}}]);