(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{133:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=a.a.createContext({}),l=function(e){var t=a.a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=n,m=u["".concat(p,".").concat(d)]||u[d]||b[d]||o;return r?a.a.createElement(m,c(c({ref:t},i),{},{components:r})):a.a.createElement(m,c({ref:t},i))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,p=new Array(o);p[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,p[1]=c;for(var i=2;i<o;i++)p[i]=r[i];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},95:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return p})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return l}));var n=r(3),a=r(8),o=(r(0),r(133)),p={id:"graphql-inspector",title:"Integrate With GraphQL Inspector",sidebar_label:"GraphQL Inspector"},c={unversionedId:"recipes/graphql-inspector",id:"version-legacy/recipes/graphql-inspector",isDocsHomePage:!1,title:"Integrate With GraphQL Inspector",description:"GraphQL Inspector outputs a list of changes between two GraphQL schemas.",source:"@site/versioned_docs/version-legacy/recipes/graphql-inspector.md",slug:"/recipes/graphql-inspector",permalink:"/docs/legacy/recipes/graphql-inspector",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/recipes/graphql-inspector.md",version:"legacy",sidebar_label:"GraphQL Inspector",sidebar:"version-legacy/docs",previous:{title:"Integrate With GraphQL Code Generator",permalink:"/docs/legacy/recipes/graphql-code-generator"},next:{title:"TypeGraphQL Integration",permalink:"/docs/legacy/recipes/type-graphql"}},s=[],i={toc:s};function l(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},i,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://graphql-inspector.com/"},"GraphQL Inspector"))," outputs a list of changes between two GraphQL schemas.\nEvery change is precisely explained and marked as breaking, non-breaking or dangerous.\nIt helps you validate documents and fragments against a schema and even find similar or duplicated types."),Object(o.b)("p",null,"GraphQL Modules comes with a built-in support for ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://graphql-inspector.com/"},"GraphQL Inspector")),"."),Object(o.b)("p",null,"To get started, add ",Object(o.b)("inlineCode",{parentName:"p"},"@graphql-inspector/cli")," to your app:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"yarn global add @graphql-inspector/cli\n")),Object(o.b)("p",null,"And create ",Object(o.b)("inlineCode",{parentName:"p"},"schema.ts")," to expose the schema of your GraphQL Modules application.\nGraphQL Modules won't load other things such as injectors, resolvers and providers when you just try to get type definitions from your top module, because GraphQL Modules loads every part of module lazily."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Create ",Object(o.b)("inlineCode",{parentName:"li"},"src/schema.ts")," to expose your type definitions to ",Object(o.b)("strong",{parentName:"li"},Object(o.b)("a",{parentName:"strong",href:"https://graphql-inspector.com/"},"GraphQL Inspector"))," without any business logic.")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"src/schema.ts")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { AppModule } from './modules/app.module';\n\n// Get schema from top module, and export it\nexport default AppModule.schema;\n")),Object(o.b)("p",null,"Then, you can run:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"introspect ./schema.ts --require ts-node/register\n")),Object(o.b)("p",null,"See also ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://graphql-inspector.com/docs/"},"the documentation of GraphQL Inspector"))," to learn more."))}l.isMDXComponent=!0}}]);