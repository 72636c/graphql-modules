"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3669],{4137:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(b,s(s({ref:n},p),{},{components:t})):r.createElement(b,s({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8448:function(e,n,t){var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},7358:function(e,n,t){t.d(n,{Z:function(){return u}});var r=t(7294),a=t(2713);var o=function(){var e=(0,r.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(6010),i="tabItem_1uMI",c="tabItemActive_2DSg";var l=37,p=39;var u=function(e){var n=e.lazy,t=e.block,a=e.defaultValue,u=e.values,d=e.groupId,m=e.className,b=o(),f=b.tabGroupChoices,v=b.setTabGroupChoices,g=(0,r.useState)(a),h=g[0],y=g[1],k=r.Children.toArray(e.children),S=[];if(null!=d){var x=f[d];null!=x&&x!==h&&u.some((function(e){return e.value===x}))&&y(x)}var w=function(e){var n=e.currentTarget,t=S.indexOf(n),r=u[t].value;y(r),null!=d&&(v(d,r),setTimeout((function(){var e,t,r,a,o,s,i,l;(e=n.getBoundingClientRect(),t=e.top,r=e.left,a=e.bottom,o=e.right,s=window,i=s.innerHeight,l=s.innerWidth,t>=0&&o<=l&&a<=i&&r>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(c),setTimeout((function(){return n.classList.remove(c)}),2e3))}),150))},E=function(e){var n,t;switch(e.keyCode){case p:var r=S.indexOf(e.target)+1;t=S[r]||S[0];break;case l:var a=S.indexOf(e.target)-1;t=S[a]||S[S.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},m)},u.map((function(e){var n=e.value,t=e.label;return r.createElement("li",{role:"tab",tabIndex:h===n?0:-1,"aria-selected":h===n,className:(0,s.Z)("tabs__item",i,{"tabs__item--active":h===n}),key:n,ref:function(e){return S.push(e)},onKeyDown:E,onFocus:w,onClick:w},t)}))),n?(0,r.cloneElement)(k.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},k.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==h})}))))}},2713:function(e,n,t){var r=(0,t(7294).createContext)(void 0);n.Z=r},2742:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return d},default:function(){return b}});var r=t(7462),a=t(3366),o=(t(7294),t(4137)),s=t(7358),i=t(8448),c=["components"],l={id:"subscriptions",title:"Subscriptions"},p=void 0,u={unversionedId:"advanced/subscriptions",id:"advanced/subscriptions",isDocsHomePage:!1,title:"Subscriptions",description:"Subscription is a third kind of GraphQL operation, next to Query and Mutation. Think of it as an event emitter where events are emitted by your backend and consumed by a GraphQL client - frontend in most scenarios.",source:"@site/docs/advanced/subscriptions.md",sourceDirName:"advanced",slug:"/advanced/subscriptions",permalink:"/docs/advanced/subscriptions",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/advanced/subscriptions.md",version:"current",frontMatter:{id:"subscriptions",title:"Subscriptions"},sidebar:"docs",previous:{title:"Scopes",permalink:"/docs/di/scopes"},next:{title:"Middlewares",permalink:"/docs/advanced/middlewares"}},d=[{value:"Setup",id:"setup",children:[]},{value:"Example",id:"example",children:[]}],m={toc:d};function b(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Subscription is a third kind of GraphQL operation, next to Query and Mutation. Think of it as an event emitter where events are emitted by your backend and consumed by a GraphQL client - frontend in most scenarios."),(0,o.kt)("p",null,"GraphQL is just a specification and Express GraphQL or Apollo Server are Node implementations of the server-side part of GraphQL. Natural fit for Subscriptions is WebSocket protocol but it could be anything. We're going to focus only on WS and use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apollographql/subscriptions-transport-ws"},(0,o.kt)("inlineCode",{parentName:"a"},"subscriptions-transport-ws"))," package as our transport layer."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"For Queries and Mutations we use ",(0,o.kt)("inlineCode",{parentName:"p"},"createExecution()")," method to create an execution logic, in case of Subscriptions it's very similar. We construct subscription phase with ",(0,o.kt)("inlineCode",{parentName:"p"},"createSubscription()")," method and provide it to a GraphQL server."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createApplication } from 'graphql-modules';\n\nconst application = createApplication({\n  modules: [\n    /* ... */\n  ],\n});\n\nconst subscribe = application.createSubscription();\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"createSubscription()")," accepts an object with ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe")," property in case you want to use your own subscription logic. It uses ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql")," by default.")),(0,o.kt)("p",null,"Why do we need it? GraphQL Modules needs to understand the life cycle of a subscription to avoid memory leaks."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"We recommend to use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apollographql/graphql-subscriptions"},(0,o.kt)("inlineCode",{parentName:"a"},"graphql-subscriptions"))," as it provides handful utility functions (filtering for example) and an event emitter."),(0,o.kt)("p",null,"Provide ",(0,o.kt)("inlineCode",{parentName:"p"},"PubSub")," with an instance as the value so as a singleton service it becomes available across all modules."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="application.ts"',title:'"application.ts"'},"import { createApplication } from 'graphql-modules';\nimport { PubSub } from 'graphql-subscriptions';\nimport { myModule } from './my-module';\n\nconst application = createApplication({\n  modules: [myModule /*...*/],\n  providers: [\n    {\n      provide: PubSub,\n      useValue: new PubSub(),\n    },\n  ],\n});\n")),(0,o.kt)("p",null,"Accessing ",(0,o.kt)("inlineCode",{parentName:"p"},"PubSub")," in a module can be done both, in a resolve function and ",(0,o.kt)("inlineCode",{parentName:"p"},"Messages")," service."),(0,o.kt)("p",null,"Take a look at two things here, how ",(0,o.kt)("inlineCode",{parentName:"p"},"MESSAGE_ADDED")," event was emitter in ",(0,o.kt)("inlineCode",{parentName:"p"},"Messages.send()")," and how ",(0,o.kt)("inlineCode",{parentName:"p"},"Subscriptions.messageAdded")," subscribes to events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="my-module.ts"',title:'"my-module.ts"'},"import { createModule, Injectable, gql } from 'graphql-modules';\nimport { PubSub } from 'graphql-subscriptions';\n\nconst MESSAGE_ADDED = 'MESSAGE_ADDED';\n\nconst messages = [\n  /* ... */\n];\n\n@Injectable()\nclass Messages {\n  constructor(private pubsub: PubSub) {}\n\n  async all() {\n    return messages;\n  }\n\n  async send(body: string) {\n    const message = {\n      id: generateRandomId(),\n      body,\n    };\n\n    messages.push(message);\n\n    this.pubsub.publish(MESSAGE_ADDED, { messageAdded: message });\n\n    return message;\n  }\n}\n\nexport const myModule = createModule({\n  id: 'my-module',\n  providers: [Messages],\n  typeDefs: gql`\n    type Query {\n      messages: [Message!]\n    }\n\n    type Mutation {\n      sendMessage(message: String!): Message!\n    }\n\n    type Subscription {\n      messageAdded: Message\n    }\n\n    type Message {\n      id: ID!\n      body: String!\n    }\n  `,\n  resolvers: {\n    Query: {\n      messages(parent, args, ctx: GraphQLModules.Context) {\n        return ctx.injector.get(Messages).all();\n      },\n    },\n    Mutation: {\n      sendMessage(parent, { message }, ctx: GraphQLModules.Context) {\n        return ctx.injector.get(Messages).send(message);\n      },\n    },\n    Subscription: {\n      messageAdded: {\n        subscribe(root, args, ctx: GraphQLModules.Context) {\n          return ctx.injector.get(PubSub).asyncIterator([MESSAGE_ADDED]);\n        },\n      },\n    },\n  },\n});\n")),(0,o.kt)("p",null,"Here are reference implementations of using GraphQL Subscriptions with WebSockets in both, Apollo Server and Express GraphQL."),(0,o.kt)(s.Z,{defaultValue:"apollo",values:[{label:"Apollo Server",value:"apollo"},{label:"Express GraphQL",value:"express"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"apollo",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.ts"',title:'"server.ts"'},"import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server';\nimport { application } from './application';\n\nconst schema = application.createSchemaForApollo();\n\nconst server = new ApolloServer({\n  schema,\n});\n\nserver.listen().then(({ url }) => {\n  console.log(`\ud83d\ude80 Server ready at ${url}`);\n});\n"))),(0,o.kt)(i.Z,{value:"express",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="server.ts"',title:'"server.ts"'},"import 'reflect-metadata';\nimport express from 'express';\nimport graphqlHTTP from 'express-graphql';\nimport { createServer } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport { application } from './application';\n\nconst execute = application.createExecution();\nconst subscribe = application.createSubscription();\nconst schema = application.schema;\n\nconst server = express();\n\nserver.use(\n  '/',\n  graphqlHTTP({\n    schema,\n    customExecuteFn: execute,\n    graphiql: true,\n  })\n);\n\nconst webServer = createServer(app);\n\nwebServer.listen(4000, () => {\n  console.log('\ud83d\ude80 Server ready at http://localhost:4000');\n\n  new SubscriptionServer(\n    {\n      execute,\n      subscribe,\n      schema,\n    },\n    {\n      server: webServer,\n      path: '/',\n    }\n  );\n});\n")))))}b.isMDXComponent=!0},6010:function(e,n,t){function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}function a(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}t.d(n,{Z:function(){return a}})}}]);