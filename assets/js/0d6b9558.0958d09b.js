"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4770],{4137:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return m}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},l={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,f=u["".concat(s,".").concat(m)]||u[m]||l[m]||o;return t?n.createElement(f,i(i({ref:r},p),{},{components:t})):n.createElement(f,i({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5045:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var n=t(7462),a=t(3366),o=(t(7294),t(4137)),i=["components"],c={id:"dataloader",title:"Solve N+1 Using DataLoader"},s=void 0,d={unversionedId:"recipes/dataloader",id:"recipes/dataloader",isDocsHomePage:!1,title:"Solve N+1 Using DataLoader",description:"DataLoader is a generic library which aims to solve the n+1 issue in large-scale GraphQL Applications.",source:"@site/docs/recipes/dataloader.md",sourceDirName:"recipes",slug:"/recipes/dataloader",permalink:"/docs/recipes/dataloader",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/recipes/dataloader.md",version:"current",frontMatter:{id:"dataloader",title:"Solve N+1 Using DataLoader"},sidebar:"docs",previous:{title:"Lifecycles",permalink:"/docs/advanced/lifecycles"},next:{title:"Migration from v0.X",permalink:"/docs/recipes/migration"}},p=[{value:"DataLoader as a Service",id:"dataloader-as-a-service",children:[]},{value:"DataLoader in a Service",id:"dataloader-in-a-service",children:[]}],l={toc:p};function u(e){var r=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"DataLoader is a generic library which aims to solve the ",(0,o.kt)("inlineCode",{parentName:"p"},"n+1")," issue in large-scale GraphQL Applications.\nYou can ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/facebook/dataloader"},"read more about DataLoader")),"."),(0,o.kt)("p",null,"DataLoader can be used in GraphQL Modules with an easy setup. You can use them as providers or in providers. If you want to use them as providers, you can extend the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataLoader")," class to benefit Dependency Injection or wrap factory functions with ",(0,o.kt)("inlineCode",{parentName:"p"},"Inject"),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"Scope.Operation")," is recommended for this usage because ",(0,o.kt)("inlineCode",{parentName:"p"},"DataLoader")," works on a cache-per-request mechanism."),(0,o.kt)("h2",{id:"dataloader-as-a-service"},"DataLoader as a Service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createModule, Scope, InjectionToken } from 'graphql-modules';\nimport DataLoader from 'dataloader';\n\nexport const USER_DATA_LOADER = new InjectionToken('USER_DATA_LOADER');\n\nexport const myModule = createModule({\n  providers: [\n    {\n      provide: USER_DATA_LOADER,\n      scope: Scope.Operation,\n      useFactory: () => new DataLoader(keys => myBatchGetUsers(keys));\n    }\n  ],\n  resolvers: {\n    Query: {\n      getUserById(root, args, context) {\n        return context.injector.get(USER_DATA_LOADER).load(args.id)\n      }\n    }\n  }\n});\n")),(0,o.kt)("p",null,"You don't need to create"),(0,o.kt)("h2",{id:"dataloader-in-a-service"},"DataLoader in a Service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable, Scope } from 'graphql-modules';\nimport DataLoader from 'dataloader';\nimport { MyExternalDataProvider } from './my-external-data-provider';\n\n@Injectable({\n  scope: Scope.Operation,\n})\nexport class UserProvider {\n  private dataLoader = new DataLoader((keys) =>\n    this.myDataProvider.findUsers(keys)\n  );\n\n  constructor(private myDataProvider: MyExternalDataProvider) {}\n\n  getUserById(userId: string) {\n    return this.dataLoader.load(userId);\n  }\n}\n")))}u.isMDXComponent=!0}}]);