"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2153],{4137:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,v=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return t?r.createElement(v,l(l({ref:n},p),{},{components:t})):r.createElement(v,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9647:function(e,n,t){var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},7225:function(e,n,t){t.d(n,{Z:function(){return d}});var r=t(7462),a=t(7294),o=t(1048),l=t(2713);var i=function(){var e=(0,a.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(3309),u=t(6010),p="tabItem_1uMI";function c(e){var n,t,r,o=e.lazy,l=e.block,c=e.defaultValue,d=e.values,m=e.groupId,v=e.className,k=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=d?d:k.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),y=(0,s.lx)(f,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===c?c:null!=(n=null!=c?c:null==(t=k.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=k[0])?void 0:r.props.value;if(null!==g&&!f.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=i(),b=h.tabGroupChoices,N=h.setTabGroupChoices,T=(0,a.useState)(g),x=T[0],I=T[1],w=[],C=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var j=b[m];null!=j&&j!==x&&f.some((function(e){return e.value===j}))&&I(j)}var P=function(e){var n=e.currentTarget,t=w.indexOf(n),r=f[t].value;r!==x&&(C(n),I(r),null!=m&&N(m,r))},E=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=w.indexOf(e.currentTarget)+1;t=w[r]||w[0];break;case"ArrowLeft":var a=w.indexOf(e.currentTarget)-1;t=w[a]||w[w.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":l},v)},f.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,className:(0,u.Z)("tabs__item",p,{"tabs__item--active":x===n}),key:n,ref:function(e){return w.push(e)},onKeyDown:E,onFocus:P,onClick:P},null!=t?t:n)}))),o?(0,a.cloneElement)(k.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},k.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==x})}))))}function d(e){var n=(0,o.Z)();return a.createElement(c,(0,r.Z)({key:String(n)},e))}},2713:function(e,n,t){var r=(0,t(7294).createContext)(void 0);n.Z=r},4793:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return v}});var r=t(7462),a=t(3366),o=(t(7294),t(4137)),l=t(7225),i=t(9647),s=["components"],u={id:"providers",title:"Providers and Tokens"},p=void 0,c={unversionedId:"di/providers",id:"di/providers",isDocsHomePage:!1,title:"Providers and Tokens",description:"The building blocks of DI are Provider(s) and InjectionToken(s).",source:"@site/docs/di/providers.md",sourceDirName:"di",slug:"/di/providers",permalink:"/docs/di/providers",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/docs/di/providers.md",tags:[],version:"current",frontMatter:{id:"providers",title:"Providers and Tokens"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/di/introduction"},next:{title:"Scopes",permalink:"/docs/di/scopes"}},d=[{value:"Defining Tokens",id:"defining-tokens",children:[{value:"Class",id:"class",children:[],level:3},{value:"Value",id:"value",children:[],level:3},{value:"Factory",id:"factory",children:[],level:3}],level:2},{value:"Using Services and Tokens",id:"using-services-and-tokens",children:[{value:"Service",id:"service",children:[],level:3},{value:"InjectionToken",id:"injectiontoken",children:[],level:3}],level:2},{value:"Global Providers and Token",id:"global-providers-and-token",children:[],level:2},{value:"Lazy with forwardRef",id:"lazy-with-forwardref",children:[],level:2},{value:"Available Tokens",id:"available-tokens",children:[],level:2}],m={toc:d};function v(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The building blocks of DI are ",(0,o.kt)("strong",{parentName:"p"},"Provider"),"(s) and ",(0,o.kt)("strong",{parentName:"p"},"InjectionToken"),"(s)."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"InjectionToken")," - a ",(0,o.kt)("inlineCode",{parentName:"li"},"symbol")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"class")," representing an object or any value in Dependency Injection space."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Provider")," - provides a value to a specific token.")),(0,o.kt)("h2",{id:"defining-tokens"},"Defining Tokens"),(0,o.kt)("p",null,"Dependency Injection is an abstraction over actual objects and values."),(0,o.kt)("p",null,"There are three kinds of providers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#class"},"Class provider")," - creates an instance of a class"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#value"},"Value provider")," - provides ready-to-use value"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#factory"},"Factory provider")," - function to provide a value")),(0,o.kt)("h3",{id:"class"},"Class"),(0,o.kt)("p",null,"Using a ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," provider in GraphQL Modules is the easiest approach to DI. The class is instantiated automatically and in case of Operation Scope it's created only on demand."),(0,o.kt)("p",null,"Every Service should be decorated with ",(0,o.kt)("inlineCode",{parentName:"p"},"@Injectable")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="data.ts"',title:'"data.ts"'},"import { Injectable } from 'graphql-modules';\n\n@Injectable()\nexport class Data {}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="module.ts"',title:'"module.ts"'},"import { createModule } from 'graphql-modules';\nimport { Data } from './data';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  /* ... */\n  providers: [Data],\n});\n")),(0,o.kt)("p",null,"It's a shorthand expression for:"),(0,o.kt)(l.Z,{defaultValue:"expression",values:[{label:"Expression",value:"expression"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"expression",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  provide: Data,\n  useClass: Data,\n}\n"))),(0,o.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="module.ts"',title:'"module.ts"'},"import { createModule } from 'graphql-modules';\nimport { Data } from './data';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  /* ... */\n  providers: [\n    {\n      provide: Data,\n      useClass: Data,\n    },\n  ],\n});\n")))),(0,o.kt)("h3",{id:"value"},"Value"),(0,o.kt)("p",null,"Value provider requires a Token that represents a value, either ",(0,o.kt)("inlineCode",{parentName:"p"},"InjectionToken")," or a class."),(0,o.kt)(l.Z,{defaultValue:"expression",values:[{label:"Expression",value:"expression"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"expression",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  provide: ApiKey,\n  useValue: 'my-api-key',\n}\n"))),(0,o.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="keys.ts"',title:'"keys.ts"'},"import { InjectionToken } from 'graphql-modules';\n\nexport const ApiKey = new InjectionToken<string>('api-key');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="module.ts"',title:'"module.ts"'},"import { createModule } from 'graphql-modules';\nimport { ApiKey } from './keys';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  /* ... */\n  providers: [\n    {\n      provide: ApiKey,\n      useValue: 'my-api-key',\n    },\n  ],\n});\n")))),(0,o.kt)("h3",{id:"factory"},"Factory"),(0,o.kt)("p",null,"In case you want to create a dependent value, using a factory provider is the answer. Factory can be useful also to create an instance of a class, for example when using third-party libraries."),(0,o.kt)(l.Z,{defaultValue:"expression",values:[{label:"Expression",value:"expression"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"expression",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  provide: ApiKey,\n  useFactory(config: Config) {\n    if (config.environment === 'production') {\n      return 'my-api-key';\n    }\n\n    return null;\n  },\n  deps: [Config]\n}\n"))),(0,o.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="keys.ts"',title:'"keys.ts"'},"import { InjectionToken } from 'graphql-modules';\n\nexport const ApiKey = new InjectionToken<string>('api-key');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="module.ts"',title:'"module.ts"'},"import { createModule } from 'graphql-modules';\nimport { ApiKey } from './keys';\n\nexport const myModule = createModule({\n  id: 'my-module',\n  /* ... */\n  providers: [\n    {\n      provide: ApiKey,\n      useFactory(config: Config) {\n        if (context.environment) {\n          return 'my-api-key';\n        }\n\n        return null;\n      },\n      deps: [Config],\n    },\n  ],\n});\n")))),(0,o.kt)("h2",{id:"using-services-and-tokens"},"Using Services and Tokens"),(0,o.kt)("p",null,"Provider is a way to define a value and match it with a Token or a Service. Let's see how to consume Services and Tokens."),(0,o.kt)("h3",{id:"service"},"Service"),(0,o.kt)("p",null,"Accessing a service is fairly simple. You ask for a service in a constructor of a class or by using ",(0,o.kt)("inlineCode",{parentName:"p"},"Injector")," directly."),(0,o.kt)(l.Z,{defaultValue:"resolver",values:[{label:"Resolver",value:"resolver"},{label:"Service",value:"service"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"resolver",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Auth } from './auth';\n\nconst resolvers = {\n  Query: {\n    me(parent, args, context, info) {\n      const auth = context.injector.get(Auth);\n\n      return auth.getCurrentUser();\n    },\n  },\n};\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Injector")," is available in GraphQL Context under ",(0,o.kt)("inlineCode",{parentName:"p"},"injector")," property."))),(0,o.kt)(i.Z,{value:"service",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable } from 'graphql-modules';\nimport { Auth } from './auth';\n\n@Injectable()\nclass Posts {\n  constructor(private auth: Auth) {}\n\n  allPosts() {\n    if (!this.auth.isLoggedIn()) {\n      throw new Error('Auth required');\n    }\n\n    return [\n      /* ... */\n    ];\n  }\n}\n")))),(0,o.kt)("h3",{id:"injectiontoken"},"InjectionToken"),(0,o.kt)("p",null,"Consuming ",(0,o.kt)("inlineCode",{parentName:"p"},"InjectionToken")," is very similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"Service"),". The only difference is that you need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"@Inject")," decorator but only in some cases."),(0,o.kt)(l.Z,{defaultValue:"resolver",values:[{label:"Resolver",value:"resolver"},{label:"Service",value:"service"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"resolver",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ApiKey } from './keys';\n\nconst resolvers = {\n  Query: {\n    me(parent, args, context, info) {\n      const apiKey = context.injector.get(ApiKey);\n\n      if (!this.key) {\n        throw new Error('API key is required');\n      }\n\n      return auth.getCurrentUser();\n    },\n  },\n};\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Injector")," is available in GraphQL Context under ",(0,o.kt)("inlineCode",{parentName:"p"},"injector")," property."))),(0,o.kt)(i.Z,{value:"service",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable, Inject } from 'graphql-modules';\nimport { ApiKey } from './keys';\n\n@Injectable()\nclass Posts {\n  constructor(@Inject(ApiKey) private key: string) {}\n\n  allPosts() {\n    if (!this.key) {\n      throw new Error('API key is required');\n    }\n\n    return [\n      /* ... */\n    ];\n  }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"@Inject")," decorator is needed because of limitation of type system.")))),(0,o.kt)("h2",{id:"global-providers-and-token"},"Global Providers and Token"),(0,o.kt)("p",null,"Module is able to share tokens and providers with other modules, even application. When enabling a global flag, the provider still depends on an original Injector."),(0,o.kt)(l.Z,{defaultValue:"definition",values:[{label:"Definition",value:"definition"},{label:"Usage",value:"usage"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"definition",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Users module\n\n@Injectable({\n  global: true,\n})\nexport class Auth {\n  constructor(private logger: Logger) {}\n\n  getCurrentUser() {\n    logger.debug(`Asking for authenticated user`);\n    return /*... */;\n  }\n}\n"))),(0,o.kt)(i.Z,{value:"usage",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Posts module\n\n@Injectable()\nexport class Posts {\n  constructor(private auth: Auth, private logger: Logger) {}\n\n  getMyPosts() {\n    const me = this.auth.getCurrentUser();\n\n    logger.debug(`Asking for my posts`);\n\n    return /* ... */;\n  }\n}\n")))),(0,o.kt)("p",null,"In the scenario above, we've got two modules: Posts and Users.\nBoth modules defines their own ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger"),".\nUsers module defines ",(0,o.kt)("inlineCode",{parentName:"p"},"Auth")," service as globally available.\nPosts module defines ",(0,o.kt)("inlineCode",{parentName:"p"},"Posts")," service."),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"Posts.getMyPosts()")," is called, it fetches a current user from ",(0,o.kt)("inlineCode",{parentName:"p"},"Auth")," service.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"Auth.getCurrentUser()")," calls a logger (provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"Users")," module).\nIn ",(0,o.kt)("inlineCode",{parentName:"p"},"Posts.getMyPosts()")," a different logger is invoked (provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"Posts")," module)."),(0,o.kt)("p",null,"What all of that mean? Because global providers are accessible in all modules, they still use the injector they were created by.\nGlobal providers are still isolated but their API is public to other modules."),(0,o.kt)("h2",{id:"lazy-with-forwardref"},"Lazy with forwardRef"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"forwardRef")," function allows to refer to references which are not yet defined. Useful when circular dependency of modules is an issue."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable, Inject } from 'graphql-modules';\nimport { ApiKey } from './keys';\n\n@Injectable()\nclass Posts {\n  constructor(@Inject(forwardRef(() => ApiKey)) private key: string) {}\n\n  allPosts() {\n    if (!this.key) {\n      throw new Error('API key is required');\n    }\n\n    return [\n      /* ... */\n    ];\n  }\n}\n")),(0,o.kt)("h2",{id:"available-tokens"},"Available Tokens"),(0,o.kt)("p",null,"GraphQL Modules have a set of built-in and ready to use Tokens. They may be handy in some situations."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api#context"},(0,o.kt)("inlineCode",{parentName:"a"},"CONTEXT"))," - represents a provided GraphQL Context (",(0,o.kt)("inlineCode",{parentName:"li"},"GraphQLModules.GlobalContext"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api#module_id"},(0,o.kt)("inlineCode",{parentName:"a"},"MODULE_ID"))," - represents an id of the current module.")))}v.isMDXComponent=!0}}]);