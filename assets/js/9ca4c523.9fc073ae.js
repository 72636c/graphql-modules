(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5593],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=p(t),d=o,v=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return t?n.createElement(v,l(l({ref:r},u),{},{components:t})):n.createElement(v,l({ref:r},u))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=m;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var p=2;p<i;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7817:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return l},metadata:function(){return a},toc:function(){return s},default:function(){return u}});var n=t(2122),o=t(9756),i=(t(7294),t(3905)),l={id:"implement-resolvers",title:"Implement Your Resolvers",sidebar_label:"Implement Resolvers"},a={unversionedId:"introduction/implement-resolvers",id:"version-legacy/introduction/implement-resolvers",isDocsHomePage:!1,title:"Implement Your Resolvers",description:"GraphQL Modules lets you implement your GraphQL resolvers in a standard way, just like other GraphQL applications.",source:"@site/versioned_docs/version-legacy/introduction/implement-resolvers.md",sourceDirName:"introduction",slug:"/introduction/implement-resolvers",permalink:"/docs/legacy/introduction/implement-resolvers",editUrl:"https://github.com/Urigo/graphql-modules/edit/master/website/versioned_docs/version-legacy/introduction/implement-resolvers.md",version:"legacy",sidebar_label:"Implement Resolvers",frontMatter:{id:"implement-resolvers",title:"Implement Your Resolvers",sidebar_label:"Implement Resolvers"},sidebar:"version-legacy/docs",previous:{title:"Implement Your Server",permalink:"/docs/legacy/introduction/implement-server"},next:{title:"Implement Your Providers",permalink:"/docs/legacy/introduction/implement-providers"}},s=[{value:"Basic Resolvers",id:"basic-resolvers",children:[]},{value:"With Providers",id:"with-providers",children:[]}],p={toc:s};function u(e){var r=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"GraphQL Modules lets you implement your GraphQL resolvers in a standard way, just like other GraphQL applications."),(0,i.kt)("h2",{id:"basic-resolvers"},"Basic Resolvers"),(0,i.kt)("p",null,"To get started with implementing basic resolvers, create a simple object with a 'type name \u2192 fields' mapping."),(0,i.kt)("p",null,"Let's take for an example the following schema for ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Query"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modules/my-module/schema.graphql")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  user(id: ID!): User\n}\n\ntype User {\n  id: ID!\n  username: String!\n}\n")),(0,i.kt)("p",null,"Let's implement the resolvers object. For now we will use just static mocked objects."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modules/my-module/resolvers.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  Query: {\n    user: (root, { id }) => {\n      return {\n        _id: id,\n        username: 'jhon',\n      };\n    },\n  },\n  User: {\n    id: (user) => user._id,\n    username: (user) => user.username,\n  },\n};\n")),(0,i.kt)("p",null,"Now, update your ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLModule")," declaration to load the resolvers:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modules/my-module/index.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GraphQLModule } from '@graphql-modules/core';\nimport * as typeDefs from './schema.graphql';\nimport resolvers from './resolvers';\n\nexport const MyModule = new GraphQLModule({\n  typeDefs,\n  resolvers,\n});\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"We can import from ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.graphql")," because we are doing some bundling tricks. If you need help with it, refer to the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/legacy/recipes/development-environment"},"Development Environment"))," section.")),(0,i.kt)("h2",{id:"with-providers"},"With Providers"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Provider"),"s are a first-class citizen in GraphQL Modules - they can easily interact with other modules, access modules' configurations, manage their lifecycles, and more."),(0,i.kt)("p",null,"To know how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"Provider"),"s, in the next step, we will take the previous example and change it to use ",(0,i.kt)("inlineCode",{parentName:"p"},"Provider"),"."))}u.isMDXComponent=!0}}]);